{
  "address": "0xcDb412c98e1f72987E4f8133d8cD1384bE883feE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREDITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "burnCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyCredit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestScorer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueSponsor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSponsorAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setCreditPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_scorer",
          "type": "address"
        }
      ],
      "name": "setHighestScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setLeagueDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sponsorName",
          "type": "bytes32"
        }
      ],
      "name": "sponsorLeague",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFirstLeague",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSponsorAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinSponsorAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpLeagueAndStartNew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7845f85b1a43f4514aae9b0e0ff75afce721a68836b9a14fb4f7d86a63b54f5",
  "receipt": {
    "to": null,
    "from": "0x5d657189A82095996751a763B6bE0dC5a2b80b77",
    "contractAddress": "0xcDb412c98e1f72987E4f8133d8cD1384bE883feE",
    "transactionIndex": 0,
    "gasUsed": "4283413",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000040000000000000000000000000000000000000000000000000200200000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000004000000000000000000000000000",
    "blockHash": "0x4b6a37752da550a2e3ca6cf05cf70dd999ef326cafdf64fafc057782976e0e2d",
    "transactionHash": "0xa7845f85b1a43f4514aae9b0e0ff75afce721a68836b9a14fb4f7d86a63b54f5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4589,
        "transactionHash": "0xa7845f85b1a43f4514aae9b0e0ff75afce721a68836b9a14fb4f7d86a63b54f5",
        "address": "0xcDb412c98e1f72987E4f8133d8cD1384bE883feE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d657189a82095996751a763b6be0dc5a2b80b77"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4b6a37752da550a2e3ca6cf05cf70dd999ef326cafdf64fafc057782976e0e2d"
      }
    ],
    "blockNumber": 4589,
    "cumulativeGasUsed": "4283413",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4bc0cb4003a3843757f46e7820e4b8be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREDITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCredit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestScorer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueSponsor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSponsorAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setCreditPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_scorer\",\"type\":\"address\"}],\"name\":\"setHighestScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setLeagueDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sponsorName\",\"type\":\"bytes32\"}],\"name\":\"sponsorLeague\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFirstLeague\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSponsorAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinSponsorAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpLeagueAndStartNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpaceShooter.sol\":\"CryptoSpaceInvaders\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SpaceShooter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\ncontract CryptoSpaceInvaders is\\n    ERC1155,\\n    Ownable,\\n    ERC1155Burnable,\\n    ERC1155Supply\\n{\\n    uint256 public constant CREDITS = 0;\\n    uint256 public creditPrice = 0.01 ether;\\n\\n    // add highest score that can be set\\n    uint256 public highestScore = 0;\\n    address public highestScorer = address(0);\\n    uint256 public leagueDuration = 1 days;\\n    uint256 public leagueStart = 0;\\n    uint256 public leagueNumber = 0;\\n    bytes32 public leagueSponsor = \\\"\\\";\\n    uint256 public minSponsorAmount = 1 ether;\\n    uint256 public leagueReward = 0;\\n\\n    // We could add more types of tokens here for example NFT badges, NFT space ships with different stats, different types of weapons, etc.\\n\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    // Burn a single credit for playing the game\\n    // @param _id - the id of the token to burn\\n    function burnCredit(uint256 _id) public {\\n        require(\\n            leagueStart + leagueDuration > block.timestamp,\\n            \\\"League is not active\\\"\\n        );\\n        require(leagueStart != 0, \\\"Game has not started yet\\\");\\n        _burn(_msgSender(), _id, 10**18);\\n    }\\n\\n    // Mint specific amount of credits for playing the game\\n    // @param _account - the account to mint the credits to\\n    // @param _id - the id of the token to mint\\n    // @param _amount - the amount of credits to mint\\n    function buyCredit(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) public payable {\\n        require(msg.value >= _amount * creditPrice, \\\"Insufficient value\\\");\\n        _mint(_account, _id, _amount * (10**18), \\\"\\\");\\n\\n        // send half of the value to the owner and allocate rest towards leagueReward\\n        uint256 ownerShare = msg.value / 3;\\n        leagueReward += msg.value - ownerShare;\\n        payable(owner()).transfer(ownerShare);\\n    }\\n\\n    // Allow users to sponsor the game\\n    function sponsorLeague(bytes32 _sponsorName) public payable {\\n        require(msg.value >= minSponsorAmount, \\\"Insufficient value\\\");\\n        require(leagueSponsor == \\\"\\\", \\\"League already sponsored\\\");\\n\\n        leagueReward += msg.value;\\n        leagueSponsor = _sponsorName;\\n    }\\n\\n    // Sets the price of a credit\\n    // @param newPrice The price of a credit in wei\\n    function setCreditPrice(uint256 newPrice) public onlyOwner {\\n        creditPrice = newPrice;\\n    }\\n\\n    // Sets the highest score\\n    // @param _score The new highest score\\n    function setHighestScore(uint256 _score, address _scorer) public onlyOwner {\\n        require(_score > highestScore, \\\"Score is not higher than current\\\");\\n        require(\\n            _scorer != address(0),\\n            \\\"Scorer address cannot be the zero address\\\"\\n        );\\n        // require that the league has started\\n        require(block.timestamp >= leagueStart, \\\"League has not started yet\\\");\\n        // require that the league has not ended\\n        require(\\n            block.timestamp <= leagueStart + leagueDuration,\\n            \\\"League has ended\\\"\\n        );\\n        highestScore = _score;\\n        highestScorer = _scorer;\\n    }\\n\\n    // Sets the league duration\\n    // @param _duration The new league duration\\n    function setLeagueDuration(uint256 _duration) public onlyOwner {\\n        leagueDuration = _duration;\\n    }\\n\\n    // Wrap up league, send rewards and start new league\\n    function wrapUpLeagueAndStartNew() public {\\n        require(\\n            block.timestamp >= leagueStart + leagueDuration,\\n            \\\"League is not over yet\\\"\\n        );\\n        // Send rewards to top player\\n        payable(highestScorer).transfer(leagueReward);\\n        leagueReward = 0;\\n        leagueSponsor = \\\"\\\";\\n\\n        // Start new league\\n        leagueStart = block.timestamp;\\n        leagueNumber++;\\n    }\\n\\n    function startFirstLeague() public onlyOwner {\\n        leagueStart = block.timestamp;\\n        leagueNumber = 1;\\n    }\\n\\n    // Default functions\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    function updateMinSponsorAmount(uint256 _minSponsorAmount)\\n        public\\n        onlyOwner\\n    {\\n        minSponsorAmount = _minSponsorAmount;\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff5db8b3e3587a8acfbf2122da81eee58d2f19d533cc25faff6ae6d12b8c62a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc1000060055560006006556000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506201518060085560006009556000600a556000600b55670de0b6b3a7640000600c556000600d553480156200008a57600080fd5b5060405180602001604052806000815250620000ac81620000d360201b60201c565b50620000cd620000c1620000e860201b60201c565b620000f060201b60201c565b62000517565b8060029081620000e4919062000430565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023857607f821691505b6020821081036200024e576200024d620001f0565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000279565b620002c4868362000279565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003116200030b6200030584620002dc565b620002e6565b620002dc565b9050919050565b6000819050919050565b6200032d83620002f0565b620003456200033c8262000318565b84845462000286565b825550505050565b600090565b6200035c6200034d565b6200036981848462000322565b505050565b5b8181101562000391576200038560008262000352565b6001810190506200036f565b5050565b601f821115620003e057620003aa8162000254565b620003b58462000269565b81016020851015620003c5578190505b620003dd620003d48562000269565b8301826200036e565b50505b505050565b600082821c905092915050565b60006200040560001984600802620003e5565b1980831691505092915050565b6000620004208383620003f2565b9150826002028217905092915050565b6200043b82620001b6565b67ffffffffffffffff811115620004575762000456620001c1565b5b6200046382546200021f565b6200047082828562000395565b600060209050601f831160018114620004a8576000841562000493578287015190505b6200049f858262000412565b8655506200050f565b601f198416620004b88662000254565b60005b82811015620004e257848901518255600182019150602085019450602081019050620004bb565b86831015620005025784890151620004fe601f891682620003f2565b8355505b6001600288020188555050505b505050505050565b614aa680620005276000396000f3fe60806040526004361061020e5760003560e01c8063715018a611610118578063bcb7574b116100a0578063e985e9c51161006f578063e985e9c514610746578063ea17386514610783578063f242432a146107ae578063f2fde38b146107d7578063f5298aca146108005761020e565b8063bcb7574b1461069c578063bd85b039146106b3578063ca6358cd146106f0578063d89699211461071b5761020e565b80638400f894116100e75780638400f894146105cb5780638da5cb5b146105f4578063a22cb4651461061f578063a8b7591314610648578063ad17a0b3146106735761020e565b8063715018a614610549578063731133e9146105605780637cb8aa4a146105895780637f2b8fa5146105b45761020e565b80632912d4181161019b5780634547a5d11161016a5780634547a5d1146104525780634e1273f41461047b5780634f558e79146104b85780635c3c8660146104f55780636b20c454146105205761020e565b80632912d418146103aa5780632eb2c2d6146103d3578063325479a4146103fc5780633b0399ba146104275761020e565b806314637feb116101e257806314637feb146102f55780631a2ad5cb146103115780631d7a55e01461032d5780631f7fdffa146103565780632886751c1461037f5761020e565b8062fdd58e1461021357806301ffc9a7146102505780630e89341c1461028d57806311baaaa7146102ca575b600080fd5b34801561021f57600080fd5b5061023a60048036038101906102359190612e20565b610829565b6040516102479190612e6f565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190612ee2565b6108f1565b6040516102849190612f2a565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190612f45565b6109d3565b6040516102c19190613002565b60405180910390f35b3480156102d657600080fd5b506102df610a67565b6040516102ec9190612e6f565b60405180910390f35b61030f600480360381019061030a919061305a565b610a6d565b005b61032b60048036038101906103269190613087565b610b1a565b005b34801561033957600080fd5b50610354600480360381019061034f9190612f45565b610c21565b005b34801561036257600080fd5b5061037d600480360381019061037891906132d7565b610c33565b005b34801561038b57600080fd5b50610394610c4d565b6040516103a19190612e6f565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc9190613392565b610c53565b005b3480156103df57600080fd5b506103fa60048036038101906103f591906133d2565b610df1565b005b34801561040857600080fd5b50610411610e92565b60405161041e9190612e6f565b60405180910390f35b34801561043357600080fd5b5061043c610e98565b60405161044991906134b0565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190612f45565b610e9e565b005b34801561048757600080fd5b506104a2600480360381019061049d919061358e565b610eb0565b6040516104af91906136c4565b60405180910390f35b3480156104c457600080fd5b506104df60048036038101906104da9190612f45565b610fc9565b6040516104ec9190612f2a565b60405180910390f35b34801561050157600080fd5b5061050a610fdd565b6040516105179190612e6f565b60405180910390f35b34801561052c57600080fd5b50610547600480360381019061054291906136e6565b610fe2565b005b34801561055557600080fd5b5061055e61107f565b005b34801561056c57600080fd5b5061058760048036038101906105829190613771565b611093565b005b34801561059557600080fd5b5061059e6110ad565b6040516105ab9190612e6f565b60405180910390f35b3480156105c057600080fd5b506105c96110b3565b005b3480156105d757600080fd5b506105f260048036038101906105ed9190612f45565b6110cc565b005b34801561060057600080fd5b5061060961117f565b6040516106169190613803565b60405180910390f35b34801561062b57600080fd5b506106466004803603810190610641919061384a565b6111a9565b005b34801561065457600080fd5b5061065d6111bf565b60405161066a9190612e6f565b60405180910390f35b34801561067f57600080fd5b5061069a60048036038101906106959190612f45565b6111c5565b005b3480156106a857600080fd5b506106b16111d7565b005b3480156106bf57600080fd5b506106da60048036038101906106d59190612f45565b6112c5565b6040516106e79190612e6f565b60405180910390f35b3480156106fc57600080fd5b506107056112e2565b6040516107129190612e6f565b60405180910390f35b34801561072757600080fd5b506107306112e8565b60405161073d9190613803565b60405180910390f35b34801561075257600080fd5b5061076d6004803603810190610768919061388a565b61130e565b60405161077a9190612f2a565b60405180910390f35b34801561078f57600080fd5b506107986113a2565b6040516107a59190612e6f565b60405180910390f35b3480156107ba57600080fd5b506107d560048036038101906107d091906138ca565b6113a8565b005b3480156107e357600080fd5b506107fe60048036038101906107f99190613961565b611449565b005b34801561080c57600080fd5b5061082760048036038101906108229190613087565b6114cc565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090613a00565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109bc57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109cc57506109cb82611569565b5b9050919050565b6060600280546109e290613a4f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0e90613a4f565b8015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b50505050509050919050565b60095481565b600c54341015610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990613acc565b60405180910390fd5b6000600b5414610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee90613b38565b60405180910390fd5b34600d6000828254610b099190613b87565b9250508190555080600b8190555050565b60055481610b289190613bbb565b341015610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190613acc565b60405180910390fd5b610b988383670de0b6b3a764000084610b839190613bbb565b604051806020016040528060008152506115d3565b6000600334610ba79190613c2c565b90508034610bb59190613c5d565b600d6000828254610bc69190613b87565b92505081905550610bd561117f565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c1a573d6000803e3d6000fd5b5050505050565b610c29611783565b80600c8190555050565b610c3b611783565b610c4784848484611801565b50505050565b60085481565b610c5b611783565b6006548211610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613cdd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590613d6f565b60405180910390fd5b600954421015610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90613ddb565b60405180910390fd5b600854600954610d639190613b87565b421115610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c90613e47565b60405180910390fd5b8160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610df9611a2d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e3f5750610e3e85610e39611a2d565b61130e565b5b610e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7590613ed9565b60405180910390fd5b610e8b8585858585611a35565b5050505050565b600c5481565b600b5481565b610ea6611783565b8060088190555050565b60608151835114610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90613f6b565b60405180910390fd5b6000835167ffffffffffffffff811115610f1357610f126130df565b5b604051908082528060200260200182016040528015610f415781602001602082028036833780820191505090505b50905060005b8451811015610fbe57610f8e858281518110610f6657610f65613f8b565b5b6020026020010151858381518110610f8157610f80613f8b565b5b6020026020010151610829565b828281518110610fa157610fa0613f8b565b5b60200260200101818152505080610fb790613fba565b9050610f47565b508091505092915050565b600080610fd5836112c5565b119050919050565b600081565b610fea611a2d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611030575061102f8361102a611a2d565b61130e565b5b61106f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106690613ed9565b60405180910390fd5b61107a838383611d56565b505050565b611087611783565b6110916000612024565b565b61109b611783565b6110a7848484846115d3565b50505050565b600d5481565b6110bb611783565b426009819055506001600a81905550565b426008546009546110dd9190613b87565b1161111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111149061404e565b60405180910390fd5b600060095403611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611159906140ba565b60405180910390fd5b61117c61116d611a2d565b82670de0b6b3a76400006120ea565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111bb6111b4611a2d565b8383612330565b5050565b600a5481565b6111cd611783565b8060058190555050565b6008546009546111e79190613b87565b421015611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122090614126565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600d549081150290604051600060405180830381858888f19350505050158015611293573d6000803e3d6000fd5b506000600d819055506000600b8190555042600981905550600a60008154809291906112be90613fba565b9190505550565b600060046000838152602001908152602001600020549050919050565b60055481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6113b0611a2d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806113f657506113f5856113f0611a2d565b61130e565b5b611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90613ed9565b60405180910390fd5b611442858585858561249c565b5050505050565b611451611783565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b7906141b8565b60405180910390fd5b6114c981612024565b50565b6114d4611a2d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061151a575061151983611514611a2d565b61130e565b5b611559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155090613ed9565b60405180910390fd5b6115648383836120ea565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116399061424a565b60405180910390fd5b600061164c611a2d565b9050600061165985612737565b9050600061166685612737565b9050611677836000898585896127b1565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116d69190613b87565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161175492919061426a565b60405180910390a461176b836000898585896127c7565b61177a836000898989896127cf565b50505050505050565b61178b611a2d565b73ffffffffffffffffffffffffffffffffffffffff166117a961117f565b73ffffffffffffffffffffffffffffffffffffffff16146117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f6906142df565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611870576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118679061424a565b60405180910390fd5b81518351146118b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ab90614371565b60405180910390fd5b60006118be611a2d565b90506118cf816000878787876127b1565b60005b8451811015611988578381815181106118ee576118ed613f8b565b5b602002602001015160008087848151811061190c5761190b613f8b565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461196e9190613b87565b92505081905550808061198090613fba565b9150506118d2565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a00929190614391565b60405180910390a4611a17816000878787876127c7565b611a26816000878787876129a6565b5050505050565b600033905090565b8151835114611a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7090614371565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf9061443a565b60405180910390fd5b6000611af2611a2d565b9050611b028187878787876127b1565b60005b8451811015611cb3576000858281518110611b2357611b22613f8b565b5b602002602001015190506000858381518110611b4257611b41613f8b565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bda906144cc565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c989190613b87565b9250508190555050505080611cac90613fba565b9050611b05565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d2a929190614391565b60405180910390a4611d408187878787876127c7565b611d4e8187878787876129a6565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbc9061455e565b60405180910390fd5b8051825114611e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0090614371565b60405180910390fd5b6000611e13611a2d565b9050611e33818560008686604051806020016040528060008152506127b1565b60005b8351811015611f80576000848281518110611e5457611e53613f8b565b5b602002602001015190506000848381518110611e7357611e72613f8b565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b906145f0565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611f7890613fba565b915050611e36565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611ff8929190614391565b60405180910390a461201e818560008686604051806020016040528060008152506127c7565b50505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612159576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121509061455e565b60405180910390fd5b6000612163611a2d565b9050600061217084612737565b9050600061217d84612737565b905061219d838760008585604051806020016040528060008152506127b1565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222b906145f0565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161230192919061426a565b60405180910390a4612327848860008686604051806020016040528060008152506127c7565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361239e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239590614682565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161248f9190612f2a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361250b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125029061443a565b60405180910390fd5b6000612515611a2d565b9050600061252285612737565b9050600061252f85612737565b905061253f8389898585896127b1565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156125d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cd906144cc565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461268b9190613b87565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161270892919061426a565b60405180910390a461271e848a8a86868a6127c7565b61272c848a8a8a8a8a6127cf565b505050505050505050565b60606000600167ffffffffffffffff811115612756576127556130df565b5b6040519080825280602002602001820160405280156127845781602001602082028036833780820191505090505b509050828160008151811061279c5761279b613f8b565b5b60200260200101818152505080915050919050565b6127bf868686868686612b7d565b505050505050565b505050505050565b6127ee8473ffffffffffffffffffffffffffffffffffffffff16612d4d565b1561299e578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016128349594939291906146f7565b6020604051808303816000875af192505050801561287057506040513d601f19601f8201168201806040525081019061286d9190614766565b60015b6129155761287c6147a0565b806308c379a0036128d857506128906147c2565b8061289b57506128da565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cf9190613002565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290c906148c4565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461299c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299390614956565b60405180910390fd5b505b505050505050565b6129c58473ffffffffffffffffffffffffffffffffffffffff16612d4d565b15612b75578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612a0b959493929190614976565b6020604051808303816000875af1925050508015612a4757506040513d601f19601f82011682018060405250810190612a449190614766565b60015b612aec57612a536147a0565b806308c379a003612aaf5750612a676147c2565b80612a725750612ab1565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa69190613002565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae3906148c4565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6a90614956565b60405180910390fd5b505b505050505050565b612b8b868686868686612d70565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612c3c5760005b8351811015612c3a57828181518110612bde57612bdd613f8b565b5b602002602001015160046000868481518110612bfd57612bfc613f8b565b5b602002602001015181526020019081526020016000206000828254612c229190613b87565b9250508190555080612c3390613fba565b9050612bc2565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612d455760005b8351811015612d43576000848281518110612c9157612c90613f8b565b5b602002602001015190506000848381518110612cb057612caf613f8b565b5b6020026020010151905060006004600084815260200190815260200160002054905081811015612d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0c90614a50565b60405180910390fd5b818103600460008581526020019081526020016000208190555050505080612d3c90613fba565b9050612c73565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612db782612d8c565b9050919050565b612dc781612dac565b8114612dd257600080fd5b50565b600081359050612de481612dbe565b92915050565b6000819050919050565b612dfd81612dea565b8114612e0857600080fd5b50565b600081359050612e1a81612df4565b92915050565b60008060408385031215612e3757612e36612d82565b5b6000612e4585828601612dd5565b9250506020612e5685828601612e0b565b9150509250929050565b612e6981612dea565b82525050565b6000602082019050612e846000830184612e60565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ebf81612e8a565b8114612eca57600080fd5b50565b600081359050612edc81612eb6565b92915050565b600060208284031215612ef857612ef7612d82565b5b6000612f0684828501612ecd565b91505092915050565b60008115159050919050565b612f2481612f0f565b82525050565b6000602082019050612f3f6000830184612f1b565b92915050565b600060208284031215612f5b57612f5a612d82565b5b6000612f6984828501612e0b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fac578082015181840152602081019050612f91565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fd482612f72565b612fde8185612f7d565b9350612fee818560208601612f8e565b612ff781612fb8565b840191505092915050565b6000602082019050818103600083015261301c8184612fc9565b905092915050565b6000819050919050565b61303781613024565b811461304257600080fd5b50565b6000813590506130548161302e565b92915050565b6000602082840312156130705761306f612d82565b5b600061307e84828501613045565b91505092915050565b6000806000606084860312156130a05761309f612d82565b5b60006130ae86828701612dd5565b93505060206130bf86828701612e0b565b92505060406130d086828701612e0b565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61311782612fb8565b810181811067ffffffffffffffff82111715613136576131356130df565b5b80604052505050565b6000613149612d78565b9050613155828261310e565b919050565b600067ffffffffffffffff821115613175576131746130df565b5b602082029050602081019050919050565b600080fd5b600061319e6131998461315a565b61313f565b905080838252602082019050602084028301858111156131c1576131c0613186565b5b835b818110156131ea57806131d68882612e0b565b8452602084019350506020810190506131c3565b5050509392505050565b600082601f830112613209576132086130da565b5b813561321984826020860161318b565b91505092915050565b600080fd5b600067ffffffffffffffff821115613242576132416130df565b5b61324b82612fb8565b9050602081019050919050565b82818337600083830152505050565b600061327a61327584613227565b61313f565b90508281526020810184848401111561329657613295613222565b5b6132a1848285613258565b509392505050565b600082601f8301126132be576132bd6130da565b5b81356132ce848260208601613267565b91505092915050565b600080600080608085870312156132f1576132f0612d82565b5b60006132ff87828801612dd5565b945050602085013567ffffffffffffffff8111156133205761331f612d87565b5b61332c878288016131f4565b935050604085013567ffffffffffffffff81111561334d5761334c612d87565b5b613359878288016131f4565b925050606085013567ffffffffffffffff81111561337a57613379612d87565b5b613386878288016132a9565b91505092959194509250565b600080604083850312156133a9576133a8612d82565b5b60006133b785828601612e0b565b92505060206133c885828601612dd5565b9150509250929050565b600080600080600060a086880312156133ee576133ed612d82565b5b60006133fc88828901612dd5565b955050602061340d88828901612dd5565b945050604086013567ffffffffffffffff81111561342e5761342d612d87565b5b61343a888289016131f4565b935050606086013567ffffffffffffffff81111561345b5761345a612d87565b5b613467888289016131f4565b925050608086013567ffffffffffffffff81111561348857613487612d87565b5b613494888289016132a9565b9150509295509295909350565b6134aa81613024565b82525050565b60006020820190506134c560008301846134a1565b92915050565b600067ffffffffffffffff8211156134e6576134e56130df565b5b602082029050602081019050919050565b600061350a613505846134cb565b61313f565b9050808382526020820190506020840283018581111561352d5761352c613186565b5b835b8181101561355657806135428882612dd5565b84526020840193505060208101905061352f565b5050509392505050565b600082601f830112613575576135746130da565b5b81356135858482602086016134f7565b91505092915050565b600080604083850312156135a5576135a4612d82565b5b600083013567ffffffffffffffff8111156135c3576135c2612d87565b5b6135cf85828601613560565b925050602083013567ffffffffffffffff8111156135f0576135ef612d87565b5b6135fc858286016131f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363b81612dea565b82525050565b600061364d8383613632565b60208301905092915050565b6000602082019050919050565b600061367182613606565b61367b8185613611565b935061368683613622565b8060005b838110156136b757815161369e8882613641565b97506136a983613659565b92505060018101905061368a565b5085935050505092915050565b600060208201905081810360008301526136de8184613666565b905092915050565b6000806000606084860312156136ff576136fe612d82565b5b600061370d86828701612dd5565b935050602084013567ffffffffffffffff81111561372e5761372d612d87565b5b61373a868287016131f4565b925050604084013567ffffffffffffffff81111561375b5761375a612d87565b5b613767868287016131f4565b9150509250925092565b6000806000806080858703121561378b5761378a612d82565b5b600061379987828801612dd5565b94505060206137aa87828801612e0b565b93505060406137bb87828801612e0b565b925050606085013567ffffffffffffffff8111156137dc576137db612d87565b5b6137e8878288016132a9565b91505092959194509250565b6137fd81612dac565b82525050565b600060208201905061381860008301846137f4565b92915050565b61382781612f0f565b811461383257600080fd5b50565b6000813590506138448161381e565b92915050565b6000806040838503121561386157613860612d82565b5b600061386f85828601612dd5565b925050602061388085828601613835565b9150509250929050565b600080604083850312156138a1576138a0612d82565b5b60006138af85828601612dd5565b92505060206138c085828601612dd5565b9150509250929050565b600080600080600060a086880312156138e6576138e5612d82565b5b60006138f488828901612dd5565b955050602061390588828901612dd5565b945050604061391688828901612e0b565b935050606061392788828901612e0b565b925050608086013567ffffffffffffffff81111561394857613947612d87565b5b613954888289016132a9565b9150509295509295909350565b60006020828403121561397757613976612d82565b5b600061398584828501612dd5565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006139ea602a83612f7d565b91506139f58261398e565b604082019050919050565b60006020820190508181036000830152613a19816139dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a6757607f821691505b602082108103613a7a57613a79613a20565b5b50919050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000613ab6601283612f7d565b9150613ac182613a80565b602082019050919050565b60006020820190508181036000830152613ae581613aa9565b9050919050565b7f4c656167756520616c72656164792073706f6e736f7265640000000000000000600082015250565b6000613b22601883612f7d565b9150613b2d82613aec565b602082019050919050565b60006020820190508181036000830152613b5181613b15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b9282612dea565b9150613b9d83612dea565b9250828201905080821115613bb557613bb4613b58565b5b92915050565b6000613bc682612dea565b9150613bd183612dea565b9250828202613bdf81612dea565b91508282048414831517613bf657613bf5613b58565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c3782612dea565b9150613c4283612dea565b925082613c5257613c51613bfd565b5b828204905092915050565b6000613c6882612dea565b9150613c7383612dea565b9250828203905081811115613c8b57613c8a613b58565b5b92915050565b7f53636f7265206973206e6f7420686967686572207468616e2063757272656e74600082015250565b6000613cc7602083612f7d565b9150613cd282613c91565b602082019050919050565b60006020820190508181036000830152613cf681613cba565b9050919050565b7f53636f72657220616464726573732063616e6e6f7420626520746865207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613d59602983612f7d565b9150613d6482613cfd565b604082019050919050565b60006020820190508181036000830152613d8881613d4c565b9050919050565b7f4c656167756520686173206e6f74207374617274656420796574000000000000600082015250565b6000613dc5601a83612f7d565b9150613dd082613d8f565b602082019050919050565b60006020820190508181036000830152613df481613db8565b9050919050565b7f4c65616775652068617320656e64656400000000000000000000000000000000600082015250565b6000613e31601083612f7d565b9150613e3c82613dfb565b602082019050919050565b60006020820190508181036000830152613e6081613e24565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000613ec3602f83612f7d565b9150613ece82613e67565b604082019050919050565b60006020820190508181036000830152613ef281613eb6565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613f55602983612f7d565b9150613f6082613ef9565b604082019050919050565b60006020820190508181036000830152613f8481613f48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613fc582612dea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613ff757613ff6613b58565b5b600182019050919050565b7f4c6561677565206973206e6f7420616374697665000000000000000000000000600082015250565b6000614038601483612f7d565b915061404382614002565b602082019050919050565b600060208201905081810360008301526140678161402b565b9050919050565b7f47616d6520686173206e6f742073746172746564207965740000000000000000600082015250565b60006140a4601883612f7d565b91506140af8261406e565b602082019050919050565b600060208201905081810360008301526140d381614097565b9050919050565b7f4c6561677565206973206e6f74206f7665722079657400000000000000000000600082015250565b6000614110601683612f7d565b915061411b826140da565b602082019050919050565b6000602082019050818103600083015261413f81614103565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006141a2602683612f7d565b91506141ad82614146565b604082019050919050565b600060208201905081810360008301526141d181614195565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614234602183612f7d565b915061423f826141d8565b604082019050919050565b6000602082019050818103600083015261426381614227565b9050919050565b600060408201905061427f6000830185612e60565b61428c6020830184612e60565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142c9602083612f7d565b91506142d482614293565b602082019050919050565b600060208201905081810360008301526142f8816142bc565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061435b602883612f7d565b9150614366826142ff565b604082019050919050565b6000602082019050818103600083015261438a8161434e565b9050919050565b600060408201905081810360008301526143ab8185613666565b905081810360208301526143bf8184613666565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614424602583612f7d565b915061442f826143c8565b604082019050919050565b6000602082019050818103600083015261445381614417565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006144b6602a83612f7d565b91506144c18261445a565b604082019050919050565b600060208201905081810360008301526144e5816144a9565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614548602383612f7d565b9150614553826144ec565b604082019050919050565b600060208201905081810360008301526145778161453b565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006145da602483612f7d565b91506145e58261457e565b604082019050919050565b60006020820190508181036000830152614609816145cd565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061466c602983612f7d565b915061467782614610565b604082019050919050565b6000602082019050818103600083015261469b8161465f565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006146c9826146a2565b6146d381856146ad565b93506146e3818560208601612f8e565b6146ec81612fb8565b840191505092915050565b600060a08201905061470c60008301886137f4565b61471960208301876137f4565b6147266040830186612e60565b6147336060830185612e60565b818103608083015261474581846146be565b90509695505050505050565b60008151905061476081612eb6565b92915050565b60006020828403121561477c5761477b612d82565b5b600061478a84828501614751565b91505092915050565b60008160e01c9050919050565b600060033d11156147bf5760046000803e6147bc600051614793565b90505b90565b600060443d1061484f576147d4612d78565b60043d036004823e80513d602482011167ffffffffffffffff821117156147fc57505061484f565b808201805167ffffffffffffffff81111561481a575050505061484f565b80602083010160043d03850181111561483757505050505061484f565b6148468260200185018661310e565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006148ae603483612f7d565b91506148b982614852565b604082019050919050565b600060208201905081810360008301526148dd816148a1565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614940602883612f7d565b915061494b826148e4565b604082019050919050565b6000602082019050818103600083015261496f81614933565b9050919050565b600060a08201905061498b60008301886137f4565b61499860208301876137f4565b81810360408301526149aa8186613666565b905081810360608301526149be8185613666565b905081810360808301526149d281846146be565b90509695505050505050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b6000614a3a602883612f7d565b9150614a45826149de565b604082019050919050565b60006020820190508181036000830152614a6981614a2d565b905091905056fea2646970667358221220d79503de4a3168cf8e804903f50ff1b8877986f10da1e04dd0a26473ea0d500364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061020e5760003560e01c8063715018a611610118578063bcb7574b116100a0578063e985e9c51161006f578063e985e9c514610746578063ea17386514610783578063f242432a146107ae578063f2fde38b146107d7578063f5298aca146108005761020e565b8063bcb7574b1461069c578063bd85b039146106b3578063ca6358cd146106f0578063d89699211461071b5761020e565b80638400f894116100e75780638400f894146105cb5780638da5cb5b146105f4578063a22cb4651461061f578063a8b7591314610648578063ad17a0b3146106735761020e565b8063715018a614610549578063731133e9146105605780637cb8aa4a146105895780637f2b8fa5146105b45761020e565b80632912d4181161019b5780634547a5d11161016a5780634547a5d1146104525780634e1273f41461047b5780634f558e79146104b85780635c3c8660146104f55780636b20c454146105205761020e565b80632912d418146103aa5780632eb2c2d6146103d3578063325479a4146103fc5780633b0399ba146104275761020e565b806314637feb116101e257806314637feb146102f55780631a2ad5cb146103115780631d7a55e01461032d5780631f7fdffa146103565780632886751c1461037f5761020e565b8062fdd58e1461021357806301ffc9a7146102505780630e89341c1461028d57806311baaaa7146102ca575b600080fd5b34801561021f57600080fd5b5061023a60048036038101906102359190612e20565b610829565b6040516102479190612e6f565b60405180910390f35b34801561025c57600080fd5b5061027760048036038101906102729190612ee2565b6108f1565b6040516102849190612f2a565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af9190612f45565b6109d3565b6040516102c19190613002565b60405180910390f35b3480156102d657600080fd5b506102df610a67565b6040516102ec9190612e6f565b60405180910390f35b61030f600480360381019061030a919061305a565b610a6d565b005b61032b60048036038101906103269190613087565b610b1a565b005b34801561033957600080fd5b50610354600480360381019061034f9190612f45565b610c21565b005b34801561036257600080fd5b5061037d600480360381019061037891906132d7565b610c33565b005b34801561038b57600080fd5b50610394610c4d565b6040516103a19190612e6f565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc9190613392565b610c53565b005b3480156103df57600080fd5b506103fa60048036038101906103f591906133d2565b610df1565b005b34801561040857600080fd5b50610411610e92565b60405161041e9190612e6f565b60405180910390f35b34801561043357600080fd5b5061043c610e98565b60405161044991906134b0565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190612f45565b610e9e565b005b34801561048757600080fd5b506104a2600480360381019061049d919061358e565b610eb0565b6040516104af91906136c4565b60405180910390f35b3480156104c457600080fd5b506104df60048036038101906104da9190612f45565b610fc9565b6040516104ec9190612f2a565b60405180910390f35b34801561050157600080fd5b5061050a610fdd565b6040516105179190612e6f565b60405180910390f35b34801561052c57600080fd5b50610547600480360381019061054291906136e6565b610fe2565b005b34801561055557600080fd5b5061055e61107f565b005b34801561056c57600080fd5b5061058760048036038101906105829190613771565b611093565b005b34801561059557600080fd5b5061059e6110ad565b6040516105ab9190612e6f565b60405180910390f35b3480156105c057600080fd5b506105c96110b3565b005b3480156105d757600080fd5b506105f260048036038101906105ed9190612f45565b6110cc565b005b34801561060057600080fd5b5061060961117f565b6040516106169190613803565b60405180910390f35b34801561062b57600080fd5b506106466004803603810190610641919061384a565b6111a9565b005b34801561065457600080fd5b5061065d6111bf565b60405161066a9190612e6f565b60405180910390f35b34801561067f57600080fd5b5061069a60048036038101906106959190612f45565b6111c5565b005b3480156106a857600080fd5b506106b16111d7565b005b3480156106bf57600080fd5b506106da60048036038101906106d59190612f45565b6112c5565b6040516106e79190612e6f565b60405180910390f35b3480156106fc57600080fd5b506107056112e2565b6040516107129190612e6f565b60405180910390f35b34801561072757600080fd5b506107306112e8565b60405161073d9190613803565b60405180910390f35b34801561075257600080fd5b5061076d6004803603810190610768919061388a565b61130e565b60405161077a9190612f2a565b60405180910390f35b34801561078f57600080fd5b506107986113a2565b6040516107a59190612e6f565b60405180910390f35b3480156107ba57600080fd5b506107d560048036038101906107d091906138ca565b6113a8565b005b3480156107e357600080fd5b506107fe60048036038101906107f99190613961565b611449565b005b34801561080c57600080fd5b5061082760048036038101906108229190613087565b6114cc565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610899576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089090613a00565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806109bc57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109cc57506109cb82611569565b5b9050919050565b6060600280546109e290613a4f565b80601f0160208091040260200160405190810160405280929190818152602001828054610a0e90613a4f565b8015610a5b5780601f10610a3057610100808354040283529160200191610a5b565b820191906000526020600020905b815481529060010190602001808311610a3e57829003601f168201915b50505050509050919050565b60095481565b600c54341015610ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa990613acc565b60405180910390fd5b6000600b5414610af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aee90613b38565b60405180910390fd5b34600d6000828254610b099190613b87565b9250508190555080600b8190555050565b60055481610b289190613bbb565b341015610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190613acc565b60405180910390fd5b610b988383670de0b6b3a764000084610b839190613bbb565b604051806020016040528060008152506115d3565b6000600334610ba79190613c2c565b90508034610bb59190613c5d565b600d6000828254610bc69190613b87565b92505081905550610bd561117f565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610c1a573d6000803e3d6000fd5b5050505050565b610c29611783565b80600c8190555050565b610c3b611783565b610c4784848484611801565b50505050565b60085481565b610c5b611783565b6006548211610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613cdd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590613d6f565b60405180910390fd5b600954421015610d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4a90613ddb565b60405180910390fd5b600854600954610d639190613b87565b421115610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c90613e47565b60405180910390fd5b8160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610df9611a2d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610e3f5750610e3e85610e39611a2d565b61130e565b5b610e7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7590613ed9565b60405180910390fd5b610e8b8585858585611a35565b5050505050565b600c5481565b600b5481565b610ea6611783565b8060088190555050565b60608151835114610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90613f6b565b60405180910390fd5b6000835167ffffffffffffffff811115610f1357610f126130df565b5b604051908082528060200260200182016040528015610f415781602001602082028036833780820191505090505b50905060005b8451811015610fbe57610f8e858281518110610f6657610f65613f8b565b5b6020026020010151858381518110610f8157610f80613f8b565b5b6020026020010151610829565b828281518110610fa157610fa0613f8b565b5b60200260200101818152505080610fb790613fba565b9050610f47565b508091505092915050565b600080610fd5836112c5565b119050919050565b600081565b610fea611a2d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611030575061102f8361102a611a2d565b61130e565b5b61106f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106690613ed9565b60405180910390fd5b61107a838383611d56565b505050565b611087611783565b6110916000612024565b565b61109b611783565b6110a7848484846115d3565b50505050565b600d5481565b6110bb611783565b426009819055506001600a81905550565b426008546009546110dd9190613b87565b1161111d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111149061404e565b60405180910390fd5b600060095403611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611159906140ba565b60405180910390fd5b61117c61116d611a2d565b82670de0b6b3a76400006120ea565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6111bb6111b4611a2d565b8383612330565b5050565b600a5481565b6111cd611783565b8060058190555050565b6008546009546111e79190613b87565b421015611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122090614126565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600d549081150290604051600060405180830381858888f19350505050158015611293573d6000803e3d6000fd5b506000600d819055506000600b8190555042600981905550600a60008154809291906112be90613fba565b9190505550565b600060046000838152602001908152602001600020549050919050565b60055481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6113b0611a2d565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806113f657506113f5856113f0611a2d565b61130e565b5b611435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142c90613ed9565b60405180910390fd5b611442858585858561249c565b5050505050565b611451611783565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b7906141b8565b60405180910390fd5b6114c981612024565b50565b6114d4611a2d565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061151a575061151983611514611a2d565b61130e565b5b611559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155090613ed9565b60405180910390fd5b6115648383836120ea565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611642576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116399061424a565b60405180910390fd5b600061164c611a2d565b9050600061165985612737565b9050600061166685612737565b9050611677836000898585896127b1565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116d69190613b87565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161175492919061426a565b60405180910390a461176b836000898585896127c7565b61177a836000898989896127cf565b50505050505050565b61178b611a2d565b73ffffffffffffffffffffffffffffffffffffffff166117a961117f565b73ffffffffffffffffffffffffffffffffffffffff16146117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f6906142df565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611870576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118679061424a565b60405180910390fd5b81518351146118b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ab90614371565b60405180910390fd5b60006118be611a2d565b90506118cf816000878787876127b1565b60005b8451811015611988578381815181106118ee576118ed613f8b565b5b602002602001015160008087848151811061190c5761190b613f8b565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461196e9190613b87565b92505081905550808061198090613fba565b9150506118d2565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a00929190614391565b60405180910390a4611a17816000878787876127c7565b611a26816000878787876129a6565b5050505050565b600033905090565b8151835114611a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7090614371565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adf9061443a565b60405180910390fd5b6000611af2611a2d565b9050611b028187878787876127b1565b60005b8451811015611cb3576000858281518110611b2357611b22613f8b565b5b602002602001015190506000858381518110611b4257611b41613f8b565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bda906144cc565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c989190613b87565b9250508190555050505080611cac90613fba565b9050611b05565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611d2a929190614391565b60405180910390a4611d408187878787876127c7565b611d4e8187878787876129a6565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbc9061455e565b60405180910390fd5b8051825114611e09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0090614371565b60405180910390fd5b6000611e13611a2d565b9050611e33818560008686604051806020016040528060008152506127b1565b60005b8351811015611f80576000848281518110611e5457611e53613f8b565b5b602002602001015190506000848381518110611e7357611e72613f8b565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0b906145f0565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611f7890613fba565b915050611e36565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611ff8929190614391565b60405180910390a461201e818560008686604051806020016040528060008152506127c7565b50505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612159576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121509061455e565b60405180910390fd5b6000612163611a2d565b9050600061217084612737565b9050600061217d84612737565b905061219d838760008585604051806020016040528060008152506127b1565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905084811015612234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222b906145f0565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62898960405161230192919061426a565b60405180910390a4612327848860008686604051806020016040528060008152506127c7565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361239e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239590614682565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161248f9190612f2a565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361250b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125029061443a565b60405180910390fd5b6000612515611a2d565b9050600061252285612737565b9050600061252f85612737565b905061253f8389898585896127b1565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050858110156125d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cd906144cc565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461268b9190613b87565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161270892919061426a565b60405180910390a461271e848a8a86868a6127c7565b61272c848a8a8a8a8a6127cf565b505050505050505050565b60606000600167ffffffffffffffff811115612756576127556130df565b5b6040519080825280602002602001820160405280156127845781602001602082028036833780820191505090505b509050828160008151811061279c5761279b613f8b565b5b60200260200101818152505080915050919050565b6127bf868686868686612b7d565b505050505050565b505050505050565b6127ee8473ffffffffffffffffffffffffffffffffffffffff16612d4d565b1561299e578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016128349594939291906146f7565b6020604051808303816000875af192505050801561287057506040513d601f19601f8201168201806040525081019061286d9190614766565b60015b6129155761287c6147a0565b806308c379a0036128d857506128906147c2565b8061289b57506128da565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128cf9190613002565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161290c906148c4565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461299c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299390614956565b60405180910390fd5b505b505050505050565b6129c58473ffffffffffffffffffffffffffffffffffffffff16612d4d565b15612b75578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612a0b959493929190614976565b6020604051808303816000875af1925050508015612a4757506040513d601f19601f82011682018060405250810190612a449190614766565b60015b612aec57612a536147a0565b806308c379a003612aaf5750612a676147c2565b80612a725750612ab1565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa69190613002565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae3906148c4565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6a90614956565b60405180910390fd5b505b505050505050565b612b8b868686868686612d70565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612c3c5760005b8351811015612c3a57828181518110612bde57612bdd613f8b565b5b602002602001015160046000868481518110612bfd57612bfc613f8b565b5b602002602001015181526020019081526020016000206000828254612c229190613b87565b9250508190555080612c3390613fba565b9050612bc2565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612d455760005b8351811015612d43576000848281518110612c9157612c90613f8b565b5b602002602001015190506000848381518110612cb057612caf613f8b565b5b6020026020010151905060006004600084815260200190815260200160002054905081811015612d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d0c90614a50565b60405180910390fd5b818103600460008581526020019081526020016000208190555050505080612d3c90613fba565b9050612c73565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612db782612d8c565b9050919050565b612dc781612dac565b8114612dd257600080fd5b50565b600081359050612de481612dbe565b92915050565b6000819050919050565b612dfd81612dea565b8114612e0857600080fd5b50565b600081359050612e1a81612df4565b92915050565b60008060408385031215612e3757612e36612d82565b5b6000612e4585828601612dd5565b9250506020612e5685828601612e0b565b9150509250929050565b612e6981612dea565b82525050565b6000602082019050612e846000830184612e60565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ebf81612e8a565b8114612eca57600080fd5b50565b600081359050612edc81612eb6565b92915050565b600060208284031215612ef857612ef7612d82565b5b6000612f0684828501612ecd565b91505092915050565b60008115159050919050565b612f2481612f0f565b82525050565b6000602082019050612f3f6000830184612f1b565b92915050565b600060208284031215612f5b57612f5a612d82565b5b6000612f6984828501612e0b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612fac578082015181840152602081019050612f91565b60008484015250505050565b6000601f19601f8301169050919050565b6000612fd482612f72565b612fde8185612f7d565b9350612fee818560208601612f8e565b612ff781612fb8565b840191505092915050565b6000602082019050818103600083015261301c8184612fc9565b905092915050565b6000819050919050565b61303781613024565b811461304257600080fd5b50565b6000813590506130548161302e565b92915050565b6000602082840312156130705761306f612d82565b5b600061307e84828501613045565b91505092915050565b6000806000606084860312156130a05761309f612d82565b5b60006130ae86828701612dd5565b93505060206130bf86828701612e0b565b92505060406130d086828701612e0b565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61311782612fb8565b810181811067ffffffffffffffff82111715613136576131356130df565b5b80604052505050565b6000613149612d78565b9050613155828261310e565b919050565b600067ffffffffffffffff821115613175576131746130df565b5b602082029050602081019050919050565b600080fd5b600061319e6131998461315a565b61313f565b905080838252602082019050602084028301858111156131c1576131c0613186565b5b835b818110156131ea57806131d68882612e0b565b8452602084019350506020810190506131c3565b5050509392505050565b600082601f830112613209576132086130da565b5b813561321984826020860161318b565b91505092915050565b600080fd5b600067ffffffffffffffff821115613242576132416130df565b5b61324b82612fb8565b9050602081019050919050565b82818337600083830152505050565b600061327a61327584613227565b61313f565b90508281526020810184848401111561329657613295613222565b5b6132a1848285613258565b509392505050565b600082601f8301126132be576132bd6130da565b5b81356132ce848260208601613267565b91505092915050565b600080600080608085870312156132f1576132f0612d82565b5b60006132ff87828801612dd5565b945050602085013567ffffffffffffffff8111156133205761331f612d87565b5b61332c878288016131f4565b935050604085013567ffffffffffffffff81111561334d5761334c612d87565b5b613359878288016131f4565b925050606085013567ffffffffffffffff81111561337a57613379612d87565b5b613386878288016132a9565b91505092959194509250565b600080604083850312156133a9576133a8612d82565b5b60006133b785828601612e0b565b92505060206133c885828601612dd5565b9150509250929050565b600080600080600060a086880312156133ee576133ed612d82565b5b60006133fc88828901612dd5565b955050602061340d88828901612dd5565b945050604086013567ffffffffffffffff81111561342e5761342d612d87565b5b61343a888289016131f4565b935050606086013567ffffffffffffffff81111561345b5761345a612d87565b5b613467888289016131f4565b925050608086013567ffffffffffffffff81111561348857613487612d87565b5b613494888289016132a9565b9150509295509295909350565b6134aa81613024565b82525050565b60006020820190506134c560008301846134a1565b92915050565b600067ffffffffffffffff8211156134e6576134e56130df565b5b602082029050602081019050919050565b600061350a613505846134cb565b61313f565b9050808382526020820190506020840283018581111561352d5761352c613186565b5b835b8181101561355657806135428882612dd5565b84526020840193505060208101905061352f565b5050509392505050565b600082601f830112613575576135746130da565b5b81356135858482602086016134f7565b91505092915050565b600080604083850312156135a5576135a4612d82565b5b600083013567ffffffffffffffff8111156135c3576135c2612d87565b5b6135cf85828601613560565b925050602083013567ffffffffffffffff8111156135f0576135ef612d87565b5b6135fc858286016131f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363b81612dea565b82525050565b600061364d8383613632565b60208301905092915050565b6000602082019050919050565b600061367182613606565b61367b8185613611565b935061368683613622565b8060005b838110156136b757815161369e8882613641565b97506136a983613659565b92505060018101905061368a565b5085935050505092915050565b600060208201905081810360008301526136de8184613666565b905092915050565b6000806000606084860312156136ff576136fe612d82565b5b600061370d86828701612dd5565b935050602084013567ffffffffffffffff81111561372e5761372d612d87565b5b61373a868287016131f4565b925050604084013567ffffffffffffffff81111561375b5761375a612d87565b5b613767868287016131f4565b9150509250925092565b6000806000806080858703121561378b5761378a612d82565b5b600061379987828801612dd5565b94505060206137aa87828801612e0b565b93505060406137bb87828801612e0b565b925050606085013567ffffffffffffffff8111156137dc576137db612d87565b5b6137e8878288016132a9565b91505092959194509250565b6137fd81612dac565b82525050565b600060208201905061381860008301846137f4565b92915050565b61382781612f0f565b811461383257600080fd5b50565b6000813590506138448161381e565b92915050565b6000806040838503121561386157613860612d82565b5b600061386f85828601612dd5565b925050602061388085828601613835565b9150509250929050565b600080604083850312156138a1576138a0612d82565b5b60006138af85828601612dd5565b92505060206138c085828601612dd5565b9150509250929050565b600080600080600060a086880312156138e6576138e5612d82565b5b60006138f488828901612dd5565b955050602061390588828901612dd5565b945050604061391688828901612e0b565b935050606061392788828901612e0b565b925050608086013567ffffffffffffffff81111561394857613947612d87565b5b613954888289016132a9565b9150509295509295909350565b60006020828403121561397757613976612d82565b5b600061398584828501612dd5565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b60006139ea602a83612f7d565b91506139f58261398e565b604082019050919050565b60006020820190508181036000830152613a19816139dd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613a6757607f821691505b602082108103613a7a57613a79613a20565b5b50919050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000613ab6601283612f7d565b9150613ac182613a80565b602082019050919050565b60006020820190508181036000830152613ae581613aa9565b9050919050565b7f4c656167756520616c72656164792073706f6e736f7265640000000000000000600082015250565b6000613b22601883612f7d565b9150613b2d82613aec565b602082019050919050565b60006020820190508181036000830152613b5181613b15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b9282612dea565b9150613b9d83612dea565b9250828201905080821115613bb557613bb4613b58565b5b92915050565b6000613bc682612dea565b9150613bd183612dea565b9250828202613bdf81612dea565b91508282048414831517613bf657613bf5613b58565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c3782612dea565b9150613c4283612dea565b925082613c5257613c51613bfd565b5b828204905092915050565b6000613c6882612dea565b9150613c7383612dea565b9250828203905081811115613c8b57613c8a613b58565b5b92915050565b7f53636f7265206973206e6f7420686967686572207468616e2063757272656e74600082015250565b6000613cc7602083612f7d565b9150613cd282613c91565b602082019050919050565b60006020820190508181036000830152613cf681613cba565b9050919050565b7f53636f72657220616464726573732063616e6e6f7420626520746865207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613d59602983612f7d565b9150613d6482613cfd565b604082019050919050565b60006020820190508181036000830152613d8881613d4c565b9050919050565b7f4c656167756520686173206e6f74207374617274656420796574000000000000600082015250565b6000613dc5601a83612f7d565b9150613dd082613d8f565b602082019050919050565b60006020820190508181036000830152613df481613db8565b9050919050565b7f4c65616775652068617320656e64656400000000000000000000000000000000600082015250565b6000613e31601083612f7d565b9150613e3c82613dfb565b602082019050919050565b60006020820190508181036000830152613e6081613e24565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000613ec3602f83612f7d565b9150613ece82613e67565b604082019050919050565b60006020820190508181036000830152613ef281613eb6565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613f55602983612f7d565b9150613f6082613ef9565b604082019050919050565b60006020820190508181036000830152613f8481613f48565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613fc582612dea565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613ff757613ff6613b58565b5b600182019050919050565b7f4c6561677565206973206e6f7420616374697665000000000000000000000000600082015250565b6000614038601483612f7d565b915061404382614002565b602082019050919050565b600060208201905081810360008301526140678161402b565b9050919050565b7f47616d6520686173206e6f742073746172746564207965740000000000000000600082015250565b60006140a4601883612f7d565b91506140af8261406e565b602082019050919050565b600060208201905081810360008301526140d381614097565b9050919050565b7f4c6561677565206973206e6f74206f7665722079657400000000000000000000600082015250565b6000614110601683612f7d565b915061411b826140da565b602082019050919050565b6000602082019050818103600083015261413f81614103565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006141a2602683612f7d565b91506141ad82614146565b604082019050919050565b600060208201905081810360008301526141d181614195565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614234602183612f7d565b915061423f826141d8565b604082019050919050565b6000602082019050818103600083015261426381614227565b9050919050565b600060408201905061427f6000830185612e60565b61428c6020830184612e60565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142c9602083612f7d565b91506142d482614293565b602082019050919050565b600060208201905081810360008301526142f8816142bc565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061435b602883612f7d565b9150614366826142ff565b604082019050919050565b6000602082019050818103600083015261438a8161434e565b9050919050565b600060408201905081810360008301526143ab8185613666565b905081810360208301526143bf8184613666565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000614424602583612f7d565b915061442f826143c8565b604082019050919050565b6000602082019050818103600083015261445381614417565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006144b6602a83612f7d565b91506144c18261445a565b604082019050919050565b600060208201905081810360008301526144e5816144a9565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614548602383612f7d565b9150614553826144ec565b604082019050919050565b600060208201905081810360008301526145778161453b565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006145da602483612f7d565b91506145e58261457e565b604082019050919050565b60006020820190508181036000830152614609816145cd565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061466c602983612f7d565b915061467782614610565b604082019050919050565b6000602082019050818103600083015261469b8161465f565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006146c9826146a2565b6146d381856146ad565b93506146e3818560208601612f8e565b6146ec81612fb8565b840191505092915050565b600060a08201905061470c60008301886137f4565b61471960208301876137f4565b6147266040830186612e60565b6147336060830185612e60565b818103608083015261474581846146be565b90509695505050505050565b60008151905061476081612eb6565b92915050565b60006020828403121561477c5761477b612d82565b5b600061478a84828501614751565b91505092915050565b60008160e01c9050919050565b600060033d11156147bf5760046000803e6147bc600051614793565b90505b90565b600060443d1061484f576147d4612d78565b60043d036004823e80513d602482011167ffffffffffffffff821117156147fc57505061484f565b808201805167ffffffffffffffff81111561481a575050505061484f565b80602083010160043d03850181111561483757505050505061484f565b6148468260200185018661310e565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006148ae603483612f7d565b91506148b982614852565b604082019050919050565b600060208201905081810360008301526148dd816148a1565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614940602883612f7d565b915061494b826148e4565b604082019050919050565b6000602082019050818103600083015261496f81614933565b9050919050565b600060a08201905061498b60008301886137f4565b61499860208301876137f4565b81810360408301526149aa8186613666565b905081810360608301526149be8185613666565b905081810360808301526149d281846146be565b90509695505050505050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b6000614a3a602883612f7d565b9150614a45826149de565b604082019050919050565b60006020820190508181036000830152614a6981614a2d565b905091905056fea2646970667358221220d79503de4a3168cf8e804903f50ff1b8877986f10da1e04dd0a26473ea0d500364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1577,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2112,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "creditPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2115,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "highestScore",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2121,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "highestScorer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2124,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2127,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueStart",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2130,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueNumber",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2133,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueSponsor",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2136,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "minSponsorAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2139,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueReward",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}