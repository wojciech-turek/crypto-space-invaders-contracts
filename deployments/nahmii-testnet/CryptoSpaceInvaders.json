{
  "address": "0xfCc00705ee08703062CF307F46B5f6a8a5682875",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CREDITS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "burnCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyCredit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highestScorer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueSponsor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leagueStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "setCreditPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_score",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_scorer",
          "type": "address"
        }
      ],
      "name": "setHighestScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "setLeagueDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sponsorName",
          "type": "bytes32"
        }
      ],
      "name": "sponsorLeague",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startFirstLeague",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapUpLeagueAndStartNew",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2977cc791491f877c8ecf219901309db1fd1a524538b23d796599ebf9129d25a",
  "receipt": {
    "to": null,
    "from": "0x5d657189A82095996751a763B6bE0dC5a2b80b77",
    "contractAddress": "0xfCc00705ee08703062CF307F46B5f6a8a5682875",
    "transactionIndex": 0,
    "gasUsed": "4234358",
    "logsBloom": "0x
    "blockHash": "0x989571a82460888589c6de6efffac2e64aa170a71a5b50f2850f49e1aa8011f3",
    "transactionHash": "0x2977cc791491f877c8ecf219901309db1fd1a524538b23d796599ebf9129d25a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3979,
        "transactionHash": "0x2977cc791491f877c8ecf219901309db1fd1a524538b23d796599ebf9129d25a",
        "address": "0xfCc00705ee08703062CF307F46B5f6a8a5682875",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d657189a82095996751a763b6be0dc5a2b80b77"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x989571a82460888589c6de6efffac2e64aa170a71a5b50f2850f49e1aa8011f3"
      }
    ],
    "blockNumber": 3979,
    "cumulativeGasUsed": "4234358",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ed3ec1671079f14955ac946cd326e37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREDITS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"burnCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCredit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestScorer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueSponsor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leagueStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setCreditPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_score\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_scorer\",\"type\":\"address\"}],\"name\":\"setHighestScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setLeagueDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sponsorName\",\"type\":\"bytes32\"}],\"name\":\"sponsorLeague\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFirstLeague\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapUpLeagueAndStartNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpaceShooter.sol\":\"CryptoSpaceInvaders\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0xb11d1ade7146ac3da122e1f387ea82b0bd385d50823946c3f967dbffef3e9f4f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/SpaceShooter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\n\\ncontract CryptoSpaceInvaders is\\n    ERC1155,\\n    Ownable,\\n    ERC1155Burnable,\\n    ERC1155Supply\\n{\\n    uint256 public constant CREDITS = 0;\\n    uint256 public creditPrice = 0.01 ether;\\n\\n    // add highest score that can be set\\n    uint256 public highestScore = 0;\\n    address public highestScorer = address(0);\\n\\n    uint256 public leagueDuration = 1 days;\\n\\n    uint256 public leagueStart = 0;\\n\\n    uint256 public leagueNumber = 0;\\n\\n    bytes32 public leagueSponsor = \\\"\\\";\\n\\n    uint256 public leagueReward = 0;\\n\\n    // We could add more types of tokens here for example NFT badges, NFT space ships with different stats, different types of weapons, etc.\\n\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    // Burn a single credit for playing the game\\n    // @param _id - the id of the token to burn\\n    function burnCredit(uint256 _id) public {\\n        require(\\n            leagueStart + leagueDuration > block.timestamp,\\n            \\\"League is not active\\\"\\n        );\\n        require(leagueStart != 0, \\\"Game has not started yet\\\");\\n        _burn(_msgSender(), _id, 10**18);\\n    }\\n\\n    // Mint specific amount of credits for playing the game\\n    // @param _account - the account to mint the credits to\\n    // @param _id - the id of the token to mint\\n    // @param _amount - the amount of credits to mint\\n    function buyCredit(\\n        address _account,\\n        uint256 _id,\\n        uint256 _amount\\n    ) public payable {\\n        require(msg.value >= _amount * creditPrice, \\\"Insufficient value\\\");\\n        _mint(_account, _id, _amount * (10**18), \\\"\\\");\\n\\n        // send half of the value to the owner and allocate rest towards leagueReward\\n        uint256 ownerShare = msg.value / 3;\\n        leagueReward += msg.value - ownerShare;\\n        payable(owner()).transfer(ownerShare);\\n    }\\n\\n    // Allow users to sponsor the game\\n    function sponsorLeague(bytes32 _sponsorName) public payable {\\n        require(msg.value >= 10 ether, \\\"Insufficient value\\\");\\n        require(leagueSponsor == \\\"\\\", \\\"League already sponsored\\\");\\n\\n        leagueReward += msg.value;\\n        leagueSponsor = _sponsorName;\\n    }\\n\\n    // Sets the price of a credit\\n    // @param newPrice The price of a credit in wei\\n    function setCreditPrice(uint256 newPrice) public onlyOwner {\\n        creditPrice = newPrice;\\n    }\\n\\n    // Sets the highest score\\n    // @param _score The new highest score\\n    function setHighestScore(uint256 _score, address _scorer) public onlyOwner {\\n        require(_score > highestScore, \\\"Score is not higher than current\\\");\\n        require(\\n            _scorer != address(0),\\n            \\\"Scorer address cannot be the zero address\\\"\\n        );\\n        // require that the league has started\\n        require(block.timestamp >= leagueStart, \\\"League has not started yet\\\");\\n        // require that the league has not ended\\n        require(\\n            block.timestamp <= leagueStart + leagueDuration,\\n            \\\"League has ended\\\"\\n        );\\n        highestScore = _score;\\n        highestScorer = _scorer;\\n    }\\n\\n    // Sets the league duration\\n    // @param _duration The new league duration\\n    function setLeagueDuration(uint256 _duration) public onlyOwner {\\n        leagueDuration = _duration;\\n    }\\n\\n    // Wrap up league, send rewards and start new league\\n    function wrapUpLeagueAndStartNew() public {\\n        require(\\n            block.timestamp >= leagueStart + leagueDuration,\\n            \\\"League is not over yet\\\"\\n        );\\n        // Send rewards to top player\\n        payable(highestScorer).transfer(leagueReward);\\n        leagueReward = 0;\\n        leagueSponsor = \\\"\\\";\\n\\n        // Start new league\\n        leagueStart = block.timestamp;\\n        leagueNumber++;\\n    }\\n\\n    function startFirstLeague() public onlyOwner {\\n        leagueStart = block.timestamp;\\n        leagueNumber = 1;\\n    }\\n\\n    // Default functions\\n    function mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(account, id, amount, data);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0x5077ef3d91df4cddd4855d169816d37441e5f4f7784fad5c465abff46e056236\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052662386f26fc1000060055560006006556000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506201518060085560006009556000600a556000600b556000600c553480156200007e57600080fd5b5060405180602001604052806000815250620000a081620000c760201b60201c565b50620000c1620000b5620000dc60201b60201c565b620000e460201b60201c565b6200050b565b8060029081620000d8919062000424565b5050565b600033905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200022c57607f821691505b602082108103620002425762000241620001e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200026d565b620002b886836200026d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000305620002ff620002f984620002d0565b620002da565b620002d0565b9050919050565b6000819050919050565b6200032183620002e4565b6200033962000330826200030c565b8484546200027a565b825550505050565b600090565b6200035062000341565b6200035d81848462000316565b505050565b5b8181101562000385576200037960008262000346565b60018101905062000363565b5050565b601f821115620003d4576200039e8162000248565b620003a9846200025d565b81016020851015620003b9578190505b620003d1620003c8856200025d565b83018262000362565b50505b505050565b600082821c905092915050565b6000620003f960001984600802620003d9565b1980831691505092915050565b6000620004148383620003e6565b9150826002028217905092915050565b6200042f82620001aa565b67ffffffffffffffff8111156200044b576200044a620001b5565b5b62000457825462000213565b6200046482828562000389565b600060209050601f8311600181146200049c576000841562000487578287015190505b62000493858262000406565b86555062000503565b601f198416620004ac8662000248565b60005b82811015620004d657848901518255600182019150602085019450602081019050620004af565b86831015620004f65784890151620004f2601f891682620003e6565b8355505b6001600288020188555050505b505050505050565b614a2a806200051b6000396000f3fe6080604052600436106101f85760003560e01c8063731133e91161010d578063bcb7574b116100a0578063e985e9c51161006f578063e985e9c5146106dc578063ea17386514610719578063f242432a14610744578063f2fde38b1461076d578063f5298aca14610796576101f8565b8063bcb7574b14610632578063bd85b03914610649578063ca6358cd14610686578063d8969921146106b1576101f8565b80638da5cb5b116100dc5780638da5cb5b1461058a578063a22cb465146105b5578063a8b75913146105de578063ad17a0b314610609576101f8565b8063731133e9146104f65780637cb8aa4a1461051f5780637f2b8fa51461054a5780638400f89414610561576101f8565b80632912d418116101905780634e1273f41161015f5780634e1273f4146104115780634f558e791461044e5780635c3c86601461048b5780636b20c454146104b6578063715018a6146104df576101f8565b80632912d4181461036b5780632eb2c2d6146103945780633b0399ba146103bd5780634547a5d1146103e8576101f8565b806314637feb116101cc57806314637feb146102df5780631a2ad5cb146102fb5780631f7fdffa146103175780632886751c14610340576101f8565b8062fdd58e146101fd57806301ffc9a71461023a5780630e89341c1461027757806311baaaa7146102b4575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190612da4565b6107bf565b6040516102319190612df3565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190612e66565b610887565b60405161026e9190612eae565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612ec9565b610969565b6040516102ab9190612f86565b60405180910390f35b3480156102c057600080fd5b506102c96109fd565b6040516102d69190612df3565b60405180910390f35b6102f960048036038101906102f49190612fde565b610a03565b005b6103156004803603810190610310919061300b565b610ab6565b005b34801561032357600080fd5b5061033e6004803603810190610339919061325b565b610bbd565b005b34801561034c57600080fd5b50610355610bd7565b6040516103629190612df3565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190613316565b610bdd565b005b3480156103a057600080fd5b506103bb60048036038101906103b69190613356565b610d7b565b005b3480156103c957600080fd5b506103d2610e1c565b6040516103df9190613434565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a9190612ec9565b610e22565b005b34801561041d57600080fd5b5061043860048036038101906104339190613512565b610e34565b6040516104459190613648565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190612ec9565b610f4d565b6040516104829190612eae565b60405180910390f35b34801561049757600080fd5b506104a0610f61565b6040516104ad9190612df3565b60405180910390f35b3480156104c257600080fd5b506104dd60048036038101906104d8919061366a565b610f66565b005b3480156104eb57600080fd5b506104f4611003565b005b34801561050257600080fd5b5061051d600480360381019061051891906136f5565b611017565b005b34801561052b57600080fd5b50610534611031565b6040516105419190612df3565b60405180910390f35b34801561055657600080fd5b5061055f611037565b005b34801561056d57600080fd5b5061058860048036038101906105839190612ec9565b611050565b005b34801561059657600080fd5b5061059f611103565b6040516105ac9190613787565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d791906137ce565b61112d565b005b3480156105ea57600080fd5b506105f3611143565b6040516106009190612df3565b60405180910390f35b34801561061557600080fd5b50610630600480360381019061062b9190612ec9565b611149565b005b34801561063e57600080fd5b5061064761115b565b005b34801561065557600080fd5b50610670600480360381019061066b9190612ec9565b611249565b60405161067d9190612df3565b60405180910390f35b34801561069257600080fd5b5061069b611266565b6040516106a89190612df3565b60405180910390f35b3480156106bd57600080fd5b506106c661126c565b6040516106d39190613787565b60405180910390f35b3480156106e857600080fd5b5061070360048036038101906106fe919061380e565b611292565b6040516107109190612eae565b60405180910390f35b34801561072557600080fd5b5061072e611326565b60405161073b9190612df3565b60405180910390f35b34801561075057600080fd5b5061076b6004803603810190610766919061384e565b61132c565b005b34801561077957600080fd5b50610794600480360381019061078f91906138e5565b6113cd565b005b3480156107a257600080fd5b506107bd60048036038101906107b8919061300b565b611450565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690613984565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109625750610961826114ed565b5b9050919050565b606060028054610978906139d3565b80601f01602080910402602001604051908101604052809291908181526020018280546109a4906139d3565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505050509050919050565b60095481565b678ac7230489e80000341015610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590613a50565b60405180910390fd5b6000600b5414610a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8a90613abc565b60405180910390fd5b34600c6000828254610aa59190613b0b565b9250508190555080600b8190555050565b60055481610ac49190613b3f565b341015610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90613a50565b60405180910390fd5b610b348383670de0b6b3a764000084610b1f9190613b3f565b60405180602001604052806000815250611557565b6000600334610b439190613bb0565b90508034610b519190613be1565b600c6000828254610b629190613b0b565b92505081905550610b71611103565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610bb6573d6000803e3d6000fd5b5050505050565b610bc5611707565b610bd184848484611785565b50505050565b60085481565b610be5611707565b6006548211610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2090613c61565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90613cf3565b60405180910390fd5b600954421015610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490613d5f565b60405180910390fd5b600854600954610ced9190613b0b565b421115610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690613dcb565b60405180910390fd5b8160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610d836119b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610dc95750610dc885610dc36119b1565b611292565b5b610e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dff90613e5d565b60405180910390fd5b610e1585858585856119b9565b5050505050565b600b5481565b610e2a611707565b8060088190555050565b60608151835114610e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7190613eef565b60405180910390fd5b6000835167ffffffffffffffff811115610e9757610e96613063565b5b604051908082528060200260200182016040528015610ec55781602001602082028036833780820191505090505b50905060005b8451811015610f4257610f12858281518110610eea57610ee9613f0f565b5b6020026020010151858381518110610f0557610f04613f0f565b5b60200260200101516107bf565b828281518110610f2557610f24613f0f565b5b60200260200101818152505080610f3b90613f3e565b9050610ecb565b508091505092915050565b600080610f5983611249565b119050919050565b600081565b610f6e6119b1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610fb45750610fb383610fae6119b1565b611292565b5b610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90613e5d565b60405180910390fd5b610ffe838383611cda565b505050565b61100b611707565b6110156000611fa8565b565b61101f611707565b61102b84848484611557565b50505050565b600c5481565b61103f611707565b426009819055506001600a81905550565b426008546009546110619190613b0b565b116110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890613fd2565b60405180910390fd5b6000600954036110e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dd9061403e565b60405180910390fd5b6111006110f16119b1565b82670de0b6b3a764000061206e565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61113f6111386119b1565b83836122b4565b5050565b600a5481565b611151611707565b8060058190555050565b60085460095461116b9190613b0b565b4210156111ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a4906140aa565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600c549081150290604051600060405180830381858888f19350505050158015611217573d6000803e3d6000fd5b506000600c819055506000600b8190555042600981905550600a600081548092919061124290613f3e565b9190505550565b600060046000838152602001908152602001600020549050919050565b60055481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6113346119b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061137a5750611379856113746119b1565b611292565b5b6113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b090613e5d565b60405180910390fd5b6113c68585858585612420565b5050505050565b6113d5611707565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143b9061413c565b60405180910390fd5b61144d81611fa8565b50565b6114586119b1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061149e575061149d836114986119b1565b611292565b5b6114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d490613e5d565b60405180910390fd5b6114e883838361206e565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd906141ce565b60405180910390fd5b60006115d06119b1565b905060006115dd856126bb565b905060006115ea856126bb565b90506115fb83600089858589612735565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165a9190613b0b565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516116d89291906141ee565b60405180910390a46116ef8360008985858961274b565b6116fe83600089898989612753565b50505050505050565b61170f6119b1565b73ffffffffffffffffffffffffffffffffffffffff1661172d611103565b73ffffffffffffffffffffffffffffffffffffffff1614611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177a90614263565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036117f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117eb906141ce565b60405180910390fd5b8151835114611838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182f906142f5565b60405180910390fd5b60006118426119b1565b905061185381600087878787612735565b60005b845181101561190c5783818151811061187257611871613f0f565b5b60200260200101516000808784815181106118905761188f613f0f565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f29190613b0b565b92505081905550808061190490613f3e565b915050611856565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611984929190614315565b60405180910390a461199b8160008787878761274b565b6119aa8160008787878761292a565b5050505050565b600033905090565b81518351146119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f4906142f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a63906143be565b60405180910390fd5b6000611a766119b1565b9050611a86818787878787612735565b60005b8451811015611c37576000858281518110611aa757611aa6613f0f565b5b602002602001015190506000858381518110611ac657611ac5613f0f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e90614450565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c1c9190613b0b565b9250508190555050505080611c3090613f3e565b9050611a89565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cae929190614315565b60405180910390a4611cc481878787878761274b565b611cd281878787878761292a565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d40906144e2565b60405180910390fd5b8051825114611d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d84906142f5565b60405180910390fd5b6000611d976119b1565b9050611db781856000868660405180602001604052806000815250612735565b60005b8351811015611f04576000848281518110611dd857611dd7613f0f565b5b602002602001015190506000848381518110611df757611df6613f0f565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8f90614574565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611efc90613f3e565b915050611dba565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f7c929190614315565b60405180910390a4611fa28185600086866040518060200160405280600081525061274b565b50505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d4906144e2565b60405180910390fd5b60006120e76119b1565b905060006120f4846126bb565b90506000612101846126bb565b905061212183876000858560405180602001604052806000815250612735565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156121b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121af90614574565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516122859291906141ee565b60405180910390a46122ab8488600086866040518060200160405280600081525061274b565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231990614606565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124139190612eae565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361248f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612486906143be565b60405180910390fd5b60006124996119b1565b905060006124a6856126bb565b905060006124b3856126bb565b90506124c3838989858589612735565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561255a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255190614450565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461260f9190613b0b565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161268c9291906141ee565b60405180910390a46126a2848a8a86868a61274b565b6126b0848a8a8a8a8a612753565b505050505050505050565b60606000600167ffffffffffffffff8111156126da576126d9613063565b5b6040519080825280602002602001820160405280156127085781602001602082028036833780820191505090505b50905082816000815181106127205761271f613f0f565b5b60200260200101818152505080915050919050565b612743868686868686612b01565b505050505050565b505050505050565b6127728473ffffffffffffffffffffffffffffffffffffffff16612cd1565b15612922578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016127b895949392919061467b565b6020604051808303816000875af19250505080156127f457506040513d601f19601f820116820180604052508101906127f191906146ea565b60015b61289957612800614724565b806308c379a00361285c5750612814614746565b8061281f575061285e565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128539190612f86565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289090614848565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612920576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612917906148da565b60405180910390fd5b505b505050505050565b6129498473ffffffffffffffffffffffffffffffffffffffff16612cd1565b15612af9578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161298f9594939291906148fa565b6020604051808303816000875af19250505080156129cb57506040513d601f19601f820116820180604052508101906129c891906146ea565b60015b612a70576129d7614724565b806308c379a003612a3357506129eb614746565b806129f65750612a35565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2a9190612f86565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6790614848565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aee906148da565b60405180910390fd5b505b505050505050565b612b0f868686868686612cf4565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612bc05760005b8351811015612bbe57828181518110612b6257612b61613f0f565b5b602002602001015160046000868481518110612b8157612b80613f0f565b5b602002602001015181526020019081526020016000206000828254612ba69190613b0b565b9250508190555080612bb790613f3e565b9050612b46565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612cc95760005b8351811015612cc7576000848281518110612c1557612c14613f0f565b5b602002602001015190506000848381518110612c3457612c33613f0f565b5b6020026020010151905060006004600084815260200190815260200160002054905081811015612c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c90906149d4565b60405180910390fd5b818103600460008581526020019081526020016000208190555050505080612cc090613f3e565b9050612bf7565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d3b82612d10565b9050919050565b612d4b81612d30565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b6000819050919050565b612d8181612d6e565b8114612d8c57600080fd5b50565b600081359050612d9e81612d78565b92915050565b60008060408385031215612dbb57612dba612d06565b5b6000612dc985828601612d59565b9250506020612dda85828601612d8f565b9150509250929050565b612ded81612d6e565b82525050565b6000602082019050612e086000830184612de4565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e4381612e0e565b8114612e4e57600080fd5b50565b600081359050612e6081612e3a565b92915050565b600060208284031215612e7c57612e7b612d06565b5b6000612e8a84828501612e51565b91505092915050565b60008115159050919050565b612ea881612e93565b82525050565b6000602082019050612ec36000830184612e9f565b92915050565b600060208284031215612edf57612ede612d06565b5b6000612eed84828501612d8f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f30578082015181840152602081019050612f15565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f5882612ef6565b612f628185612f01565b9350612f72818560208601612f12565b612f7b81612f3c565b840191505092915050565b60006020820190508181036000830152612fa08184612f4d565b905092915050565b6000819050919050565b612fbb81612fa8565b8114612fc657600080fd5b50565b600081359050612fd881612fb2565b92915050565b600060208284031215612ff457612ff3612d06565b5b600061300284828501612fc9565b91505092915050565b60008060006060848603121561302457613023612d06565b5b600061303286828701612d59565b935050602061304386828701612d8f565b925050604061305486828701612d8f565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61309b82612f3c565b810181811067ffffffffffffffff821117156130ba576130b9613063565b5b80604052505050565b60006130cd612cfc565b90506130d98282613092565b919050565b600067ffffffffffffffff8211156130f9576130f8613063565b5b602082029050602081019050919050565b600080fd5b600061312261311d846130de565b6130c3565b905080838252602082019050602084028301858111156131455761314461310a565b5b835b8181101561316e578061315a8882612d8f565b845260208401935050602081019050613147565b5050509392505050565b600082601f83011261318d5761318c61305e565b5b813561319d84826020860161310f565b91505092915050565b600080fd5b600067ffffffffffffffff8211156131c6576131c5613063565b5b6131cf82612f3c565b9050602081019050919050565b82818337600083830152505050565b60006131fe6131f9846131ab565b6130c3565b90508281526020810184848401111561321a576132196131a6565b5b6132258482856131dc565b509392505050565b600082601f8301126132425761324161305e565b5b81356132528482602086016131eb565b91505092915050565b6000806000806080858703121561327557613274612d06565b5b600061328387828801612d59565b945050602085013567ffffffffffffffff8111156132a4576132a3612d0b565b5b6132b087828801613178565b935050604085013567ffffffffffffffff8111156132d1576132d0612d0b565b5b6132dd87828801613178565b925050606085013567ffffffffffffffff8111156132fe576132fd612d0b565b5b61330a8782880161322d565b91505092959194509250565b6000806040838503121561332d5761332c612d06565b5b600061333b85828601612d8f565b925050602061334c85828601612d59565b9150509250929050565b600080600080600060a0868803121561337257613371612d06565b5b600061338088828901612d59565b955050602061339188828901612d59565b945050604086013567ffffffffffffffff8111156133b2576133b1612d0b565b5b6133be88828901613178565b935050606086013567ffffffffffffffff8111156133df576133de612d0b565b5b6133eb88828901613178565b925050608086013567ffffffffffffffff81111561340c5761340b612d0b565b5b6134188882890161322d565b9150509295509295909350565b61342e81612fa8565b82525050565b60006020820190506134496000830184613425565b92915050565b600067ffffffffffffffff82111561346a57613469613063565b5b602082029050602081019050919050565b600061348e6134898461344f565b6130c3565b905080838252602082019050602084028301858111156134b1576134b061310a565b5b835b818110156134da57806134c68882612d59565b8452602084019350506020810190506134b3565b5050509392505050565b600082601f8301126134f9576134f861305e565b5b813561350984826020860161347b565b91505092915050565b6000806040838503121561352957613528612d06565b5b600083013567ffffffffffffffff81111561354757613546612d0b565b5b613553858286016134e4565b925050602083013567ffffffffffffffff81111561357457613573612d0b565b5b61358085828601613178565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135bf81612d6e565b82525050565b60006135d183836135b6565b60208301905092915050565b6000602082019050919050565b60006135f58261358a565b6135ff8185613595565b935061360a836135a6565b8060005b8381101561363b57815161362288826135c5565b975061362d836135dd565b92505060018101905061360e565b5085935050505092915050565b6000602082019050818103600083015261366281846135ea565b905092915050565b60008060006060848603121561368357613682612d06565b5b600061369186828701612d59565b935050602084013567ffffffffffffffff8111156136b2576136b1612d0b565b5b6136be86828701613178565b925050604084013567ffffffffffffffff8111156136df576136de612d0b565b5b6136eb86828701613178565b9150509250925092565b6000806000806080858703121561370f5761370e612d06565b5b600061371d87828801612d59565b945050602061372e87828801612d8f565b935050604061373f87828801612d8f565b925050606085013567ffffffffffffffff8111156137605761375f612d0b565b5b61376c8782880161322d565b91505092959194509250565b61378181612d30565b82525050565b600060208201905061379c6000830184613778565b92915050565b6137ab81612e93565b81146137b657600080fd5b50565b6000813590506137c8816137a2565b92915050565b600080604083850312156137e5576137e4612d06565b5b60006137f385828601612d59565b9250506020613804858286016137b9565b9150509250929050565b6000806040838503121561382557613824612d06565b5b600061383385828601612d59565b925050602061384485828601612d59565b9150509250929050565b600080600080600060a0868803121561386a57613869612d06565b5b600061387888828901612d59565b955050602061388988828901612d59565b945050604061389a88828901612d8f565b93505060606138ab88828901612d8f565b925050608086013567ffffffffffffffff8111156138cc576138cb612d0b565b5b6138d88882890161322d565b9150509295509295909350565b6000602082840312156138fb576138fa612d06565b5b600061390984828501612d59565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061396e602a83612f01565b915061397982613912565b604082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139eb57607f821691505b6020821081036139fe576139fd6139a4565b5b50919050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000613a3a601283612f01565b9150613a4582613a04565b602082019050919050565b60006020820190508181036000830152613a6981613a2d565b9050919050565b7f4c656167756520616c72656164792073706f6e736f7265640000000000000000600082015250565b6000613aa6601883612f01565b9150613ab182613a70565b602082019050919050565b60006020820190508181036000830152613ad581613a99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b1682612d6e565b9150613b2183612d6e565b9250828201905080821115613b3957613b38613adc565b5b92915050565b6000613b4a82612d6e565b9150613b5583612d6e565b9250828202613b6381612d6e565b91508282048414831517613b7a57613b79613adc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613bbb82612d6e565b9150613bc683612d6e565b925082613bd657613bd5613b81565b5b828204905092915050565b6000613bec82612d6e565b9150613bf783612d6e565b9250828203905081811115613c0f57613c0e613adc565b5b92915050565b7f53636f7265206973206e6f7420686967686572207468616e2063757272656e74600082015250565b6000613c4b602083612f01565b9150613c5682613c15565b602082019050919050565b60006020820190508181036000830152613c7a81613c3e565b9050919050565b7f53636f72657220616464726573732063616e6e6f7420626520746865207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613cdd602983612f01565b9150613ce882613c81565b604082019050919050565b60006020820190508181036000830152613d0c81613cd0565b9050919050565b7f4c656167756520686173206e6f74207374617274656420796574000000000000600082015250565b6000613d49601a83612f01565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f4c65616775652068617320656e64656400000000000000000000000000000000600082015250565b6000613db5601083612f01565b9150613dc082613d7f565b602082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000613e47602f83612f01565b9150613e5282613deb565b604082019050919050565b60006020820190508181036000830152613e7681613e3a565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613ed9602983612f01565b9150613ee482613e7d565b604082019050919050565b60006020820190508181036000830152613f0881613ecc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f4982612d6e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f7b57613f7a613adc565b5b600182019050919050565b7f4c6561677565206973206e6f7420616374697665000000000000000000000000600082015250565b6000613fbc601483612f01565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f47616d6520686173206e6f742073746172746564207965740000000000000000600082015250565b6000614028601883612f01565b915061403382613ff2565b602082019050919050565b600060208201905081810360008301526140578161401b565b9050919050565b7f4c6561677565206973206e6f74206f7665722079657400000000000000000000600082015250565b6000614094601683612f01565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614126602683612f01565b9150614131826140ca565b604082019050919050565b6000602082019050818103600083015261415581614119565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006141b8602183612f01565b91506141c38261415c565b604082019050919050565b600060208201905081810360008301526141e7816141ab565b9050919050565b60006040820190506142036000830185612de4565b6142106020830184612de4565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061424d602083612f01565b915061425882614217565b602082019050919050565b6000602082019050818103600083015261427c81614240565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006142df602883612f01565b91506142ea82614283565b604082019050919050565b6000602082019050818103600083015261430e816142d2565b9050919050565b6000604082019050818103600083015261432f81856135ea565b9050818103602083015261434381846135ea565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006143a8602583612f01565b91506143b38261434c565b604082019050919050565b600060208201905081810360008301526143d78161439b565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061443a602a83612f01565b9150614445826143de565b604082019050919050565b600060208201905081810360008301526144698161442d565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006144cc602383612f01565b91506144d782614470565b604082019050919050565b600060208201905081810360008301526144fb816144bf565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061455e602483612f01565b915061456982614502565b604082019050919050565b6000602082019050818103600083015261458d81614551565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006145f0602983612f01565b91506145fb82614594565b604082019050919050565b6000602082019050818103600083015261461f816145e3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061464d82614626565b6146578185614631565b9350614667818560208601612f12565b61467081612f3c565b840191505092915050565b600060a0820190506146906000830188613778565b61469d6020830187613778565b6146aa6040830186612de4565b6146b76060830185612de4565b81810360808301526146c98184614642565b90509695505050505050565b6000815190506146e481612e3a565b92915050565b600060208284031215614700576146ff612d06565b5b600061470e848285016146d5565b91505092915050565b60008160e01c9050919050565b600060033d11156147435760046000803e614740600051614717565b90505b90565b600060443d106147d357614758612cfc565b60043d036004823e80513d602482011167ffffffffffffffff821117156147805750506147d3565b808201805167ffffffffffffffff81111561479e57505050506147d3565b80602083010160043d0385018111156147bb5750505050506147d3565b6147ca82602001850186613092565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614832603483612f01565b915061483d826147d6565b604082019050919050565b6000602082019050818103600083015261486181614825565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006148c4602883612f01565b91506148cf82614868565b604082019050919050565b600060208201905081810360008301526148f3816148b7565b9050919050565b600060a08201905061490f6000830188613778565b61491c6020830187613778565b818103604083015261492e81866135ea565b9050818103606083015261494281856135ea565b905081810360808301526149568184614642565b90509695505050505050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b60006149be602883612f01565b91506149c982614962565b604082019050919050565b600060208201905081810360008301526149ed816149b1565b905091905056fea2646970667358221220fd51e0dd4cda9ea9f30d9b4f17a1e8d1c4c06bc19c3859c4fb4ff222bd30e40864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101f85760003560e01c8063731133e91161010d578063bcb7574b116100a0578063e985e9c51161006f578063e985e9c5146106dc578063ea17386514610719578063f242432a14610744578063f2fde38b1461076d578063f5298aca14610796576101f8565b8063bcb7574b14610632578063bd85b03914610649578063ca6358cd14610686578063d8969921146106b1576101f8565b80638da5cb5b116100dc5780638da5cb5b1461058a578063a22cb465146105b5578063a8b75913146105de578063ad17a0b314610609576101f8565b8063731133e9146104f65780637cb8aa4a1461051f5780637f2b8fa51461054a5780638400f89414610561576101f8565b80632912d418116101905780634e1273f41161015f5780634e1273f4146104115780634f558e791461044e5780635c3c86601461048b5780636b20c454146104b6578063715018a6146104df576101f8565b80632912d4181461036b5780632eb2c2d6146103945780633b0399ba146103bd5780634547a5d1146103e8576101f8565b806314637feb116101cc57806314637feb146102df5780631a2ad5cb146102fb5780631f7fdffa146103175780632886751c14610340576101f8565b8062fdd58e146101fd57806301ffc9a71461023a5780630e89341c1461027757806311baaaa7146102b4575b600080fd5b34801561020957600080fd5b50610224600480360381019061021f9190612da4565b6107bf565b6040516102319190612df3565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190612e66565b610887565b60405161026e9190612eae565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612ec9565b610969565b6040516102ab9190612f86565b60405180910390f35b3480156102c057600080fd5b506102c96109fd565b6040516102d69190612df3565b60405180910390f35b6102f960048036038101906102f49190612fde565b610a03565b005b6103156004803603810190610310919061300b565b610ab6565b005b34801561032357600080fd5b5061033e6004803603810190610339919061325b565b610bbd565b005b34801561034c57600080fd5b50610355610bd7565b6040516103629190612df3565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d9190613316565b610bdd565b005b3480156103a057600080fd5b506103bb60048036038101906103b69190613356565b610d7b565b005b3480156103c957600080fd5b506103d2610e1c565b6040516103df9190613434565b60405180910390f35b3480156103f457600080fd5b5061040f600480360381019061040a9190612ec9565b610e22565b005b34801561041d57600080fd5b5061043860048036038101906104339190613512565b610e34565b6040516104459190613648565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190612ec9565b610f4d565b6040516104829190612eae565b60405180910390f35b34801561049757600080fd5b506104a0610f61565b6040516104ad9190612df3565b60405180910390f35b3480156104c257600080fd5b506104dd60048036038101906104d8919061366a565b610f66565b005b3480156104eb57600080fd5b506104f4611003565b005b34801561050257600080fd5b5061051d600480360381019061051891906136f5565b611017565b005b34801561052b57600080fd5b50610534611031565b6040516105419190612df3565b60405180910390f35b34801561055657600080fd5b5061055f611037565b005b34801561056d57600080fd5b5061058860048036038101906105839190612ec9565b611050565b005b34801561059657600080fd5b5061059f611103565b6040516105ac9190613787565b60405180910390f35b3480156105c157600080fd5b506105dc60048036038101906105d791906137ce565b61112d565b005b3480156105ea57600080fd5b506105f3611143565b6040516106009190612df3565b60405180910390f35b34801561061557600080fd5b50610630600480360381019061062b9190612ec9565b611149565b005b34801561063e57600080fd5b5061064761115b565b005b34801561065557600080fd5b50610670600480360381019061066b9190612ec9565b611249565b60405161067d9190612df3565b60405180910390f35b34801561069257600080fd5b5061069b611266565b6040516106a89190612df3565b60405180910390f35b3480156106bd57600080fd5b506106c661126c565b6040516106d39190613787565b60405180910390f35b3480156106e857600080fd5b5061070360048036038101906106fe919061380e565b611292565b6040516107109190612eae565b60405180910390f35b34801561072557600080fd5b5061072e611326565b60405161073b9190612df3565b60405180910390f35b34801561075057600080fd5b5061076b6004803603810190610766919061384e565b61132c565b005b34801561077957600080fd5b50610794600480360381019061078f91906138e5565b6113cd565b005b3480156107a257600080fd5b506107bd60048036038101906107b8919061300b565b611450565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361082f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082690613984565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109625750610961826114ed565b5b9050919050565b606060028054610978906139d3565b80601f01602080910402602001604051908101604052809291908181526020018280546109a4906139d3565b80156109f15780601f106109c6576101008083540402835291602001916109f1565b820191906000526020600020905b8154815290600101906020018083116109d457829003601f168201915b50505050509050919050565b60095481565b678ac7230489e80000341015610a4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4590613a50565b60405180910390fd5b6000600b5414610a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8a90613abc565b60405180910390fd5b34600c6000828254610aa59190613b0b565b9250508190555080600b8190555050565b60055481610ac49190613b3f565b341015610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afd90613a50565b60405180910390fd5b610b348383670de0b6b3a764000084610b1f9190613b3f565b60405180602001604052806000815250611557565b6000600334610b439190613bb0565b90508034610b519190613be1565b600c6000828254610b629190613b0b565b92505081905550610b71611103565b73ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610bb6573d6000803e3d6000fd5b5050505050565b610bc5611707565b610bd184848484611785565b50505050565b60085481565b610be5611707565b6006548211610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2090613c61565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8f90613cf3565b60405180910390fd5b600954421015610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490613d5f565b60405180910390fd5b600854600954610ced9190613b0b565b421115610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690613dcb565b60405180910390fd5b8160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610d836119b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610dc95750610dc885610dc36119b1565b611292565b5b610e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dff90613e5d565b60405180910390fd5b610e1585858585856119b9565b5050505050565b600b5481565b610e2a611707565b8060088190555050565b60608151835114610e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7190613eef565b60405180910390fd5b6000835167ffffffffffffffff811115610e9757610e96613063565b5b604051908082528060200260200182016040528015610ec55781602001602082028036833780820191505090505b50905060005b8451811015610f4257610f12858281518110610eea57610ee9613f0f565b5b6020026020010151858381518110610f0557610f04613f0f565b5b60200260200101516107bf565b828281518110610f2557610f24613f0f565b5b60200260200101818152505080610f3b90613f3e565b9050610ecb565b508091505092915050565b600080610f5983611249565b119050919050565b600081565b610f6e6119b1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610fb45750610fb383610fae6119b1565b611292565b5b610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90613e5d565b60405180910390fd5b610ffe838383611cda565b505050565b61100b611707565b6110156000611fa8565b565b61101f611707565b61102b84848484611557565b50505050565b600c5481565b61103f611707565b426009819055506001600a81905550565b426008546009546110619190613b0b565b116110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890613fd2565b60405180910390fd5b6000600954036110e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dd9061403e565b60405180910390fd5b6111006110f16119b1565b82670de0b6b3a764000061206e565b50565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61113f6111386119b1565b83836122b4565b5050565b600a5481565b611151611707565b8060058190555050565b60085460095461116b9190613b0b565b4210156111ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a4906140aa565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600c549081150290604051600060405180830381858888f19350505050158015611217573d6000803e3d6000fd5b506000600c819055506000600b8190555042600981905550600a600081548092919061124290613f3e565b9190505550565b600060046000838152602001908152602001600020549050919050565b60055481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60065481565b6113346119b1565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061137a5750611379856113746119b1565b611292565b5b6113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b090613e5d565b60405180910390fd5b6113c68585858585612420565b5050505050565b6113d5611707565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143b9061413c565b60405180910390fd5b61144d81611fa8565b50565b6114586119b1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148061149e575061149d836114986119b1565b611292565b5b6114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d490613e5d565b60405180910390fd5b6114e883838361206e565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd906141ce565b60405180910390fd5b60006115d06119b1565b905060006115dd856126bb565b905060006115ea856126bb565b90506115fb83600089858589612735565b8460008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461165a9190613b0b565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516116d89291906141ee565b60405180910390a46116ef8360008985858961274b565b6116fe83600089898989612753565b50505050505050565b61170f6119b1565b73ffffffffffffffffffffffffffffffffffffffff1661172d611103565b73ffffffffffffffffffffffffffffffffffffffff1614611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177a90614263565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036117f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117eb906141ce565b60405180910390fd5b8151835114611838576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182f906142f5565b60405180910390fd5b60006118426119b1565b905061185381600087878787612735565b60005b845181101561190c5783818151811061187257611871613f0f565b5b60200260200101516000808784815181106118905761188f613f0f565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118f29190613b0b565b92505081905550808061190490613f3e565b915050611856565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611984929190614315565b60405180910390a461199b8160008787878761274b565b6119aa8160008787878761292a565b5050505050565b600033905090565b81518351146119fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f4906142f5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a63906143be565b60405180910390fd5b6000611a766119b1565b9050611a86818787878787612735565b60005b8451811015611c37576000858281518110611aa757611aa6613f0f565b5b602002602001015190506000858381518110611ac657611ac5613f0f565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611b67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5e90614450565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c1c9190613b0b565b9250508190555050505080611c3090613f3e565b9050611a89565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611cae929190614315565b60405180910390a4611cc481878787878761274b565b611cd281878787878761292a565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d40906144e2565b60405180910390fd5b8051825114611d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d84906142f5565b60405180910390fd5b6000611d976119b1565b9050611db781856000868660405180602001604052806000815250612735565b60005b8351811015611f04576000848281518110611dd857611dd7613f0f565b5b602002602001015190506000848381518110611df757611df6613f0f565b5b60200260200101519050600080600084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8f90614574565b60405180910390fd5b81810360008085815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050508080611efc90613f3e565b915050611dba565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611f7c929190614315565b60405180910390a4611fa28185600086866040518060200160405280600081525061274b565b50505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d4906144e2565b60405180910390fd5b60006120e76119b1565b905060006120f4846126bb565b90506000612101846126bb565b905061212183876000858560405180602001604052806000815250612735565b600080600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050848110156121b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121af90614574565b60405180910390fd5b84810360008088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516122859291906141ee565b60405180910390a46122ab8488600086866040518060200160405280600081525061274b565b50505050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231990614606565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124139190612eae565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361248f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612486906143be565b60405180910390fd5b60006124996119b1565b905060006124a6856126bb565b905060006124b3856126bb565b90506124c3838989858589612735565b600080600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508581101561255a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255190614450565b60405180910390fd5b85810360008089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508560008089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461260f9190613b0b565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a60405161268c9291906141ee565b60405180910390a46126a2848a8a86868a61274b565b6126b0848a8a8a8a8a612753565b505050505050505050565b60606000600167ffffffffffffffff8111156126da576126d9613063565b5b6040519080825280602002602001820160405280156127085781602001602082028036833780820191505090505b50905082816000815181106127205761271f613f0f565b5b60200260200101818152505080915050919050565b612743868686868686612b01565b505050505050565b505050505050565b6127728473ffffffffffffffffffffffffffffffffffffffff16612cd1565b15612922578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016127b895949392919061467b565b6020604051808303816000875af19250505080156127f457506040513d601f19601f820116820180604052508101906127f191906146ea565b60015b61289957612800614724565b806308c379a00361285c5750612814614746565b8061281f575061285e565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128539190612f86565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289090614848565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612920576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612917906148da565b60405180910390fd5b505b505050505050565b6129498473ffffffffffffffffffffffffffffffffffffffff16612cd1565b15612af9578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161298f9594939291906148fa565b6020604051808303816000875af19250505080156129cb57506040513d601f19601f820116820180604052508101906129c891906146ea565b60015b612a70576129d7614724565b806308c379a003612a3357506129eb614746565b806129f65750612a35565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2a9190612f86565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6790614848565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612af7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aee906148da565b60405180910390fd5b505b505050505050565b612b0f868686868686612cf4565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612bc05760005b8351811015612bbe57828181518110612b6257612b61613f0f565b5b602002602001015160046000868481518110612b8157612b80613f0f565b5b602002602001015181526020019081526020016000206000828254612ba69190613b0b565b9250508190555080612bb790613f3e565b9050612b46565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612cc95760005b8351811015612cc7576000848281518110612c1557612c14613f0f565b5b602002602001015190506000848381518110612c3457612c33613f0f565b5b6020026020010151905060006004600084815260200190815260200160002054905081811015612c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c90906149d4565b60405180910390fd5b818103600460008581526020019081526020016000208190555050505080612cc090613f3e565b9050612bf7565b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d3b82612d10565b9050919050565b612d4b81612d30565b8114612d5657600080fd5b50565b600081359050612d6881612d42565b92915050565b6000819050919050565b612d8181612d6e565b8114612d8c57600080fd5b50565b600081359050612d9e81612d78565b92915050565b60008060408385031215612dbb57612dba612d06565b5b6000612dc985828601612d59565b9250506020612dda85828601612d8f565b9150509250929050565b612ded81612d6e565b82525050565b6000602082019050612e086000830184612de4565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e4381612e0e565b8114612e4e57600080fd5b50565b600081359050612e6081612e3a565b92915050565b600060208284031215612e7c57612e7b612d06565b5b6000612e8a84828501612e51565b91505092915050565b60008115159050919050565b612ea881612e93565b82525050565b6000602082019050612ec36000830184612e9f565b92915050565b600060208284031215612edf57612ede612d06565b5b6000612eed84828501612d8f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612f30578082015181840152602081019050612f15565b60008484015250505050565b6000601f19601f8301169050919050565b6000612f5882612ef6565b612f628185612f01565b9350612f72818560208601612f12565b612f7b81612f3c565b840191505092915050565b60006020820190508181036000830152612fa08184612f4d565b905092915050565b6000819050919050565b612fbb81612fa8565b8114612fc657600080fd5b50565b600081359050612fd881612fb2565b92915050565b600060208284031215612ff457612ff3612d06565b5b600061300284828501612fc9565b91505092915050565b60008060006060848603121561302457613023612d06565b5b600061303286828701612d59565b935050602061304386828701612d8f565b925050604061305486828701612d8f565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61309b82612f3c565b810181811067ffffffffffffffff821117156130ba576130b9613063565b5b80604052505050565b60006130cd612cfc565b90506130d98282613092565b919050565b600067ffffffffffffffff8211156130f9576130f8613063565b5b602082029050602081019050919050565b600080fd5b600061312261311d846130de565b6130c3565b905080838252602082019050602084028301858111156131455761314461310a565b5b835b8181101561316e578061315a8882612d8f565b845260208401935050602081019050613147565b5050509392505050565b600082601f83011261318d5761318c61305e565b5b813561319d84826020860161310f565b91505092915050565b600080fd5b600067ffffffffffffffff8211156131c6576131c5613063565b5b6131cf82612f3c565b9050602081019050919050565b82818337600083830152505050565b60006131fe6131f9846131ab565b6130c3565b90508281526020810184848401111561321a576132196131a6565b5b6132258482856131dc565b509392505050565b600082601f8301126132425761324161305e565b5b81356132528482602086016131eb565b91505092915050565b6000806000806080858703121561327557613274612d06565b5b600061328387828801612d59565b945050602085013567ffffffffffffffff8111156132a4576132a3612d0b565b5b6132b087828801613178565b935050604085013567ffffffffffffffff8111156132d1576132d0612d0b565b5b6132dd87828801613178565b925050606085013567ffffffffffffffff8111156132fe576132fd612d0b565b5b61330a8782880161322d565b91505092959194509250565b6000806040838503121561332d5761332c612d06565b5b600061333b85828601612d8f565b925050602061334c85828601612d59565b9150509250929050565b600080600080600060a0868803121561337257613371612d06565b5b600061338088828901612d59565b955050602061339188828901612d59565b945050604086013567ffffffffffffffff8111156133b2576133b1612d0b565b5b6133be88828901613178565b935050606086013567ffffffffffffffff8111156133df576133de612d0b565b5b6133eb88828901613178565b925050608086013567ffffffffffffffff81111561340c5761340b612d0b565b5b6134188882890161322d565b9150509295509295909350565b61342e81612fa8565b82525050565b60006020820190506134496000830184613425565b92915050565b600067ffffffffffffffff82111561346a57613469613063565b5b602082029050602081019050919050565b600061348e6134898461344f565b6130c3565b905080838252602082019050602084028301858111156134b1576134b061310a565b5b835b818110156134da57806134c68882612d59565b8452602084019350506020810190506134b3565b5050509392505050565b600082601f8301126134f9576134f861305e565b5b813561350984826020860161347b565b91505092915050565b6000806040838503121561352957613528612d06565b5b600083013567ffffffffffffffff81111561354757613546612d0b565b5b613553858286016134e4565b925050602083013567ffffffffffffffff81111561357457613573612d0b565b5b61358085828601613178565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6135bf81612d6e565b82525050565b60006135d183836135b6565b60208301905092915050565b6000602082019050919050565b60006135f58261358a565b6135ff8185613595565b935061360a836135a6565b8060005b8381101561363b57815161362288826135c5565b975061362d836135dd565b92505060018101905061360e565b5085935050505092915050565b6000602082019050818103600083015261366281846135ea565b905092915050565b60008060006060848603121561368357613682612d06565b5b600061369186828701612d59565b935050602084013567ffffffffffffffff8111156136b2576136b1612d0b565b5b6136be86828701613178565b925050604084013567ffffffffffffffff8111156136df576136de612d0b565b5b6136eb86828701613178565b9150509250925092565b6000806000806080858703121561370f5761370e612d06565b5b600061371d87828801612d59565b945050602061372e87828801612d8f565b935050604061373f87828801612d8f565b925050606085013567ffffffffffffffff8111156137605761375f612d0b565b5b61376c8782880161322d565b91505092959194509250565b61378181612d30565b82525050565b600060208201905061379c6000830184613778565b92915050565b6137ab81612e93565b81146137b657600080fd5b50565b6000813590506137c8816137a2565b92915050565b600080604083850312156137e5576137e4612d06565b5b60006137f385828601612d59565b9250506020613804858286016137b9565b9150509250929050565b6000806040838503121561382557613824612d06565b5b600061383385828601612d59565b925050602061384485828601612d59565b9150509250929050565b600080600080600060a0868803121561386a57613869612d06565b5b600061387888828901612d59565b955050602061388988828901612d59565b945050604061389a88828901612d8f565b93505060606138ab88828901612d8f565b925050608086013567ffffffffffffffff8111156138cc576138cb612d0b565b5b6138d88882890161322d565b9150509295509295909350565b6000602082840312156138fb576138fa612d06565b5b600061390984828501612d59565b91505092915050565b7f455243313135353a2061646472657373207a65726f206973206e6f742061207660008201527f616c6964206f776e657200000000000000000000000000000000000000000000602082015250565b600061396e602a83612f01565b915061397982613912565b604082019050919050565b6000602082019050818103600083015261399d81613961565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806139eb57607f821691505b6020821081036139fe576139fd6139a4565b5b50919050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000613a3a601283612f01565b9150613a4582613a04565b602082019050919050565b60006020820190508181036000830152613a6981613a2d565b9050919050565b7f4c656167756520616c72656164792073706f6e736f7265640000000000000000600082015250565b6000613aa6601883612f01565b9150613ab182613a70565b602082019050919050565b60006020820190508181036000830152613ad581613a99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b1682612d6e565b9150613b2183612d6e565b9250828201905080821115613b3957613b38613adc565b5b92915050565b6000613b4a82612d6e565b9150613b5583612d6e565b9250828202613b6381612d6e565b91508282048414831517613b7a57613b79613adc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613bbb82612d6e565b9150613bc683612d6e565b925082613bd657613bd5613b81565b5b828204905092915050565b6000613bec82612d6e565b9150613bf783612d6e565b9250828203905081811115613c0f57613c0e613adc565b5b92915050565b7f53636f7265206973206e6f7420686967686572207468616e2063757272656e74600082015250565b6000613c4b602083612f01565b9150613c5682613c15565b602082019050919050565b60006020820190508181036000830152613c7a81613c3e565b9050919050565b7f53636f72657220616464726573732063616e6e6f7420626520746865207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000613cdd602983612f01565b9150613ce882613c81565b604082019050919050565b60006020820190508181036000830152613d0c81613cd0565b9050919050565b7f4c656167756520686173206e6f74207374617274656420796574000000000000600082015250565b6000613d49601a83612f01565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f4c65616775652068617320656e64656400000000000000000000000000000000600082015250565b6000613db5601083612f01565b9150613dc082613d7f565b602082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60008201527f6572206e6f7220617070726f7665640000000000000000000000000000000000602082015250565b6000613e47602f83612f01565b9150613e5282613deb565b604082019050919050565b60006020820190508181036000830152613e7681613e3a565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000613ed9602983612f01565b9150613ee482613e7d565b604082019050919050565b60006020820190508181036000830152613f0881613ecc565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f4982612d6e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f7b57613f7a613adc565b5b600182019050919050565b7f4c6561677565206973206e6f7420616374697665000000000000000000000000600082015250565b6000613fbc601483612f01565b9150613fc782613f86565b602082019050919050565b60006020820190508181036000830152613feb81613faf565b9050919050565b7f47616d6520686173206e6f742073746172746564207965740000000000000000600082015250565b6000614028601883612f01565b915061403382613ff2565b602082019050919050565b600060208201905081810360008301526140578161401b565b9050919050565b7f4c6561677565206973206e6f74206f7665722079657400000000000000000000600082015250565b6000614094601683612f01565b915061409f8261405e565b602082019050919050565b600060208201905081810360008301526140c381614087565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614126602683612f01565b9150614131826140ca565b604082019050919050565b6000602082019050818103600083015261415581614119565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006141b8602183612f01565b91506141c38261415c565b604082019050919050565b600060208201905081810360008301526141e7816141ab565b9050919050565b60006040820190506142036000830185612de4565b6142106020830184612de4565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061424d602083612f01565b915061425882614217565b602082019050919050565b6000602082019050818103600083015261427c81614240565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b60006142df602883612f01565b91506142ea82614283565b604082019050919050565b6000602082019050818103600083015261430e816142d2565b9050919050565b6000604082019050818103600083015261432f81856135ea565b9050818103602083015261434381846135ea565b90509392505050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006143a8602583612f01565b91506143b38261434c565b604082019050919050565b600060208201905081810360008301526143d78161439b565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b600061443a602a83612f01565b9150614445826143de565b604082019050919050565b600060208201905081810360008301526144698161442d565b9050919050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006144cc602383612f01565b91506144d782614470565b604082019050919050565b600060208201905081810360008301526144fb816144bf565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061455e602483612f01565b915061456982614502565b604082019050919050565b6000602082019050818103600083015261458d81614551565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b60006145f0602983612f01565b91506145fb82614594565b604082019050919050565b6000602082019050818103600083015261461f816145e3565b9050919050565b600081519050919050565b600082825260208201905092915050565b600061464d82614626565b6146578185614631565b9350614667818560208601612f12565b61467081612f3c565b840191505092915050565b600060a0820190506146906000830188613778565b61469d6020830187613778565b6146aa6040830186612de4565b6146b76060830185612de4565b81810360808301526146c98184614642565b90509695505050505050565b6000815190506146e481612e3a565b92915050565b600060208284031215614700576146ff612d06565b5b600061470e848285016146d5565b91505092915050565b60008160e01c9050919050565b600060033d11156147435760046000803e614740600051614717565b90505b90565b600060443d106147d357614758612cfc565b60043d036004823e80513d602482011167ffffffffffffffff821117156147805750506147d3565b808201805167ffffffffffffffff81111561479e57505050506147d3565b80602083010160043d0385018111156147bb5750505050506147d3565b6147ca82602001850186613092565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614832603483612f01565b915061483d826147d6565b604082019050919050565b6000602082019050818103600083015261486181614825565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006148c4602883612f01565b91506148cf82614868565b604082019050919050565b600060208201905081810360008301526148f3816148b7565b9050919050565b600060a08201905061490f6000830188613778565b61491c6020830187613778565b818103604083015261492e81866135ea565b9050818103606083015261494281856135ea565b905081810360808301526149568184614642565b90509695505050505050565b7f455243313135353a206275726e20616d6f756e74206578636565647320746f7460008201527f616c537570706c79000000000000000000000000000000000000000000000000602082015250565b60006149be602883612f01565b91506149c982614962565b604082019050919050565b600060208201905081810360008301526149ed816149b1565b905091905056fea2646970667358221220fd51e0dd4cda9ea9f30d9b4f17a1e8d1c4c06bc19c3859c4fb4ff222bd30e40864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "exists(uint256)": {
        "details": "Indicates whether any token exist with a given id, or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalSupply(uint256)": {
        "details": "Total amount of tokens in with a given id."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1577,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2112,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "creditPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2115,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "highestScore",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2121,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "highestScorer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2124,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueDuration",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2127,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueStart",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2130,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueNumber",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2133,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueSponsor",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2136,
        "contract": "contracts/SpaceShooter.sol:CryptoSpaceInvaders",
        "label": "leagueReward",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}